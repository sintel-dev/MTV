import logging

from bson import ObjectId
from flask import request
from flask_restful import Resource

from mtv import model

LOGGER = logging.getLogger(__name__)


def get_experiment(experiment_doc):
    # get basic information of this exp
    experiment = {
        'id': str(experiment_doc.id),
        'project': experiment_doc.project,
        'dataset': experiment_doc.dataset.name,
        'date_creation': experiment_doc.insert_time.isoformat(),
        'created_by': experiment_doc.created_by,
        'pipeline': experiment_doc.pipeline.name,
        'dataruns': []
    }

    # get dataruns generated by this exp
    datarun_docs = model.Datarun.find(experiment=experiment_doc.id)
    for datarun_doc in datarun_docs:
        datarun = {
            'id': str(datarun_doc.id),
            'signal': datarun_doc.signal.name,
            'events': []
        }

        # get events of this datarun
        event_docs = model.Event.find(datarun=datarun_doc.id)
        if event_docs is not None:
            for event_doc in event_docs:
                datarun['events'].append({
                    'start_time': event_doc.start_time,
                    'stop_time': event_doc.stop_time,
                    'score': event_doc.score,
                    'tag': event_doc.tag
                })

        experiment['dataruns'].append(datarun)

    return experiment


def validate_experiment_id(experiment_id):
    try:
        eid = ObjectId(experiment_id)
    except Exception as e:
        LOGGER.exception(e)
        return {'message': str(e)}, 400

    experiment_doc = model.Experiment.find_one(id=eid)

    if experiment_doc is None:
        LOGGER.exception('Error getting experiment. '
                         'Experiment %s does not exist.', experiment_id)
        return {
            'message': 'Experiment {} does not exist'.format(experiment_id)
        }, 400

    return experiment_doc, 200


class Experiment(Resource):
    def get(self, experiment_id):
        """
        @api {get} /experiments/:experiment_id Get experiment by ID
        @apiName GetExperiment
        @apiGroup Experiment
        @apiVersion 1.0.0

        @apiParam {String} experiment_id Experiment ID.

        @apiSuccess {String} id Experiment ID.
        @apiSuccess {String} project Project name.
        @apiSuccess {String} dataset Dataset name.
        @apiSuccess {String} date_creation Date creation time.
        @apiSuccess {String} created_by User ID.
        @apiSuccess {String} pipeline Pipeline name.
        @apiSuccess {Object[]} dataruns Datarun list.
        @apiSuccess {String} dataruns.id Datarun id.
        @apiSuccess {String} dataruns.signal Signal name.
        @apiSuccess {String} dataruns.experiment Experiment id.
        @apiSuccess {Object[]} dataruns.events Event list.
        @apiSuccess {Int} dataruns.events.start_time Event start time.
        @apiSuccess {Int} dataruns.events.stop_time Event stop time.
        @apiSuccess {Float} dataruns.events.score Event anomaly score.
        @apiSuccess {String} dataruns.events.tag Event tag.
        """

        # validate experiment_id
        validate_result = validate_experiment_id(experiment_id)
        if validate_result[1] == 400:
            return validate_result

        experiment_doc = validate_result[0]

        # return result
        try:
            res = get_experiment(experiment_doc)
        except Exception as e:
            LOGGER.exception(e)
            return {'message': str(e)}, 500
        else:
            return res


class Experiments(Resource):

    def get(self):
        """
        @api {get} /experiments/ Get experiments by project name
        @apiName GetExperimentByProject
        @apiGroup Experiment
        @apiVersion 1.0.0
        @apiDescription If project ID is given, then return the experiments
        of that project; otherwise, return all the experiments.

        @apiParam {String} [project] Project name.

        @apiSuccess {Object[]} experiments Experiment ID.
        @apiSuccess {String} experiments.id Experiment ID.
        @apiSuccess {String} experiments.project Project name.
        @apiSuccess {String} experiments.dataset Dataset name.
        @apiSuccess {String} experiments.date_creation Date creation time.
        @apiSuccess {String} experiments.created_by User ID.
        @apiSuccess {String} experiments.pipeline Pipeline name.
        @apiSuccess {Object[]} experiments.dataruns Datarun list.
        @apiSuccess {String} experiments.dataruns.id Datarun id.
        @apiSuccess {String} experiments.dataruns.signal Signal name.
        @apiSuccess {String} experiments.dataruns.experiment Experiment id.
        @apiSuccess {Object[]} experiments.dataruns.events Event list.
        @apiSuccess {Int} experiments.dataruns.events.start_time Event start time.
        @apiSuccess {Int} experiments.dataruns.events.stop_time Event stop time.
        @apiSuccess {Float} experiments.dataruns.events.score Event anomaly score.
        @apiSuccess {String} experiments.dataruns.events.tag Event tag.
        """

        project = request.args.get('project', None)

        query = dict()
        if project is not None and project != '':
            query['project'] = project

        experiment_docs = model.Experiment.find(**query)

        try:
            experiments = [get_experiment(experiment_doc) for experiment_doc in experiment_docs]
        except Exception as e:
            LOGGER.exception(e)
            return {'message': str(e)}, 500
        else:
            return {'experiments': experiments}
