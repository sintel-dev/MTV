{"ast":null,"code":"import _slicedToArray from \"/home/sergiu/Projects/mtv-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/DrawChart.jsx\";\nimport React, { useEffect, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\nimport { drawChart, updateBrushPeriod } from './chartUtils';\n\nclass DrawChart extends Component {\n  componentDidMount() {\n    const _this$props = this.props,\n          dataRun = _this$props.dataRun,\n          onPeriodTimeChange = _this$props.onPeriodTimeChange,\n          selectedPeriod = _this$props.selectedPeriod;\n    const width = document.querySelector('.overview-wrapper').offsetWidth - 65;\n    const height = 36;\n    drawChart(width, height, dataRun, onPeriodTimeChange, selectedPeriod, this.props.dataRun.id);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const _nextProps$selectedPe = _slicedToArray(nextProps.selectedPeriod, 2),\n          nextPeriodStart = _nextProps$selectedPe[0],\n          nextPeriodEnd = _nextProps$selectedPe[1];\n\n    const _this$props$selectedP = _slicedToArray(this.props.selectedPeriod, 2),\n          currentPeriodStart = _this$props$selectedP[0],\n          currentPeriodEnd = _this$props$selectedP[1];\n\n    if (nextPeriodStart !== currentPeriodStart || nextPeriodEnd !== currentPeriodEnd) {\n      console.log(nextProps.selectedPeriod !== this.props.selectedPeriod); // const charts = d3.selectAll('.brush');\n      // debugger;\n      // charts.map(chart => {\n      //   console.log(chart);\n      //   return null;\n      // });\n      // debugger;\n\n      updateBrushPeriod(this.props.selectedPeriod);\n    } // const width = document.querySelector('.overview-wrapper').offsetWidth - 65;\n    // const height = 36;\n    // const { dataRun, onPeriodTimeChange, selectedPeriod } = this.props;\n    // if (nextProps.selectedPeriod !== this.props.selectedPeriod) {\n    //   drawChart(width, height, dataRun, onPeriodTimeChange, selectedPeriod);\n    // }\n\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"_\".concat(this.props.dataRun.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }); // @TODO - find a better way to target this element\n  }\n\n} // const DrawChart = ({ dataRun, onPeriodTimeChange, selectedPeriod }) => {\n//   useEffect(() => {\n// const width = document.querySelector('.overview-wrapper').offsetWidth - 65;\n// const height = 36;\n// drawChart(width, height, dataRun, onPeriodTimeChange, selectedPeriod);\n//     console.log(selectedPeriod);\n//     debugger;\n//   }, [dataRun, onPeriodTimeChange, selectedPeriod]);\n//   return (\n//     <div className={`_${dataRun.id}`} /> // @TODO - find a better way to target this element\n//   );\n// };\n\n\nDrawChart.propTypes = {\n  dataRun: PropTypes.object,\n  onPeriodTimeChange: PropTypes.func,\n  selectedPeriod: PropTypes.array\n};\nexport default DrawChart;","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/DrawChart.jsx"],"names":["React","useEffect","Component","PropTypes","d3","drawChart","updateBrushPeriod","DrawChart","componentDidMount","props","dataRun","onPeriodTimeChange","selectedPeriod","width","document","querySelector","offsetWidth","height","id","UNSAFE_componentWillReceiveProps","nextProps","nextPeriodStart","nextPeriodEnd","currentPeriodStart","currentPeriodEnd","console","log","render","propTypes","object","func","array"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AAEA,SAASC,SAAT,EAAoBC,iBAApB,QAA6C,cAA7C;;AAEA,MAAMC,SAAN,SAAwBL,SAAxB,CAAkC;AAChCM,EAAAA,iBAAiB,GAAG;AAAA,wBACsC,KAAKC,KAD3C;AAAA,UACVC,OADU,eACVA,OADU;AAAA,UACDC,kBADC,eACDA,kBADC;AAAA,UACmBC,cADnB,eACmBA,cADnB;AAElB,UAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,mBAAvB,EAA4CC,WAA5C,GAA0D,EAAxE;AACA,UAAMC,MAAM,GAAG,EAAf;AACAZ,IAAAA,SAAS,CAACQ,KAAD,EAAQI,MAAR,EAAgBP,OAAhB,EAAyBC,kBAAzB,EAA6CC,cAA7C,EAA6D,KAAKH,KAAL,CAAWC,OAAX,CAAmBQ,EAAhF,CAAT;AACD;;AAEDC,EAAAA,gCAAgC,CAACC,SAAD,EAAY;AAAA,iDACDA,SAAS,CAACR,cADT;AAAA,UACnCS,eADmC;AAAA,UAClBC,aADkB;;AAAA,iDAEK,KAAKb,KAAL,CAAWG,cAFhB;AAAA,UAEnCW,kBAFmC;AAAA,UAEfC,gBAFe;;AAG1C,QAAIH,eAAe,KAAKE,kBAApB,IAA0CD,aAAa,KAAKE,gBAAhE,EAAkF;AAChFC,MAAAA,OAAO,CAACC,GAAR,CAAYN,SAAS,CAACR,cAAV,KAA6B,KAAKH,KAAL,CAAWG,cAApD,EADgF,CAGhF;AACA;AACA;AACA;AAEA;AACA;AACA;;AACAN,MAAAA,iBAAiB,CAAC,KAAKG,KAAL,CAAWG,cAAZ,CAAjB;AACA,KAfwC,CAgB1C;AACA;AACA;AACA;AACA;AACA;;AACD;;AAEDe,EAAAA,MAAM,GAAG;AACP,WAAO;AAAK,MAAA,SAAS,aAAM,KAAKlB,KAAL,CAAWC,OAAX,CAAmBQ,EAAzB,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP,CADO,CACiD;AACzD;;AAlC+B,C,CAqClC;AACA;AACI;AACA;AACA;AACJ;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEAX,SAAS,CAACqB,SAAV,GAAsB;AACpBlB,EAAAA,OAAO,EAAEP,SAAS,CAAC0B,MADC;AAEpBlB,EAAAA,kBAAkB,EAAER,SAAS,CAAC2B,IAFV;AAGpBlB,EAAAA,cAAc,EAAET,SAAS,CAAC4B;AAHN,CAAtB;AAMA,eAAexB,SAAf","sourcesContent":["import React, { useEffect, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\n\nimport { drawChart, updateBrushPeriod } from './chartUtils';\n\nclass DrawChart extends Component {\n  componentDidMount() {\n    const { dataRun, onPeriodTimeChange, selectedPeriod } = this.props;\n    const width = document.querySelector('.overview-wrapper').offsetWidth - 65;\n    const height = 36;\n    drawChart(width, height, dataRun, onPeriodTimeChange, selectedPeriod, this.props.dataRun.id);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const [nextPeriodStart, nextPeriodEnd] = nextProps.selectedPeriod;\n    const [currentPeriodStart, currentPeriodEnd] = this.props.selectedPeriod;\n    if (nextPeriodStart !== currentPeriodStart || nextPeriodEnd !== currentPeriodEnd) {\n      console.log(nextProps.selectedPeriod !== this.props.selectedPeriod);\n\n      // const charts = d3.selectAll('.brush');\n      // debugger;\n      // charts.map(chart => {\n      //   console.log(chart);\n\n      //   return null;\n      // });\n      // debugger;\n      updateBrushPeriod(this.props.selectedPeriod);\n     }\n    // const width = document.querySelector('.overview-wrapper').offsetWidth - 65;\n    // const height = 36;\n    // const { dataRun, onPeriodTimeChange, selectedPeriod } = this.props;\n    // if (nextProps.selectedPeriod !== this.props.selectedPeriod) {\n    //   drawChart(width, height, dataRun, onPeriodTimeChange, selectedPeriod);\n    // }\n  }\n\n  render() {\n    return <div className={`_${this.props.dataRun.id}`} />; // @TODO - find a better way to target this element\n  }\n}\n\n// const DrawChart = ({ dataRun, onPeriodTimeChange, selectedPeriod }) => {\n//   useEffect(() => {\n    // const width = document.querySelector('.overview-wrapper').offsetWidth - 65;\n    // const height = 36;\n    // drawChart(width, height, dataRun, onPeriodTimeChange, selectedPeriod);\n//     console.log(selectedPeriod);\n//     debugger;\n//   }, [dataRun, onPeriodTimeChange, selectedPeriod]);\n\n//   return (\n//     <div className={`_${dataRun.id}`} /> // @TODO - find a better way to target this element\n//   );\n// };\n\nDrawChart.propTypes = {\n  dataRun: PropTypes.object,\n  onPeriodTimeChange: PropTypes.func,\n  selectedPeriod: PropTypes.array,\n};\n\nexport default DrawChart;\n"]},"metadata":{},"sourceType":"module"}