{"ast":null,"code":"import produce from 'immer';\n\nfunction DEFAULT(state) {\n  return state;\n}\n\nexport default function createReducer(initialState = {}, reducers) {\n  return function (state = initialState, action) {\n    const type = action.type;\n\n    if (!type) {\n      console.warn('Action without type', action);\n      return DEFAULT(state);\n    }\n\n    const reducer = reducers[type];\n\n    if (!reducer) {\n      return DEFAULT(state);\n    }\n\n    if (typeof reducer !== 'function') {\n      console.warn(\"Reducer for \".concat(type, \" is not a function\"));\n      return DEFAULT(state);\n    }\n\n    return produce(state, nextState => reducer(nextState, action, state));\n  };\n}","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/model/store/createReducer.js"],"names":["produce","DEFAULT","state","createReducer","initialState","reducers","action","type","console","warn","reducer","nextState"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,SAAOA,KAAP;AACD;;AAED,eAAe,SAASC,aAAT,CAAuBC,YAAY,GAAG,EAAtC,EAA0CC,QAA1C,EAAoD;AACjE,SAAO,UAASH,KAAK,GAAGE,YAAjB,EAA+BE,MAA/B,EAAuC;AAAA,UACpCC,IADoC,GAC3BD,MAD2B,CACpCC,IADoC;;AAG5C,QAAI,CAACA,IAAL,EAAW;AACTC,MAAAA,OAAO,CAACC,IAAR,CAAa,qBAAb,EAAoCH,MAApC;AACA,aAAOL,OAAO,CAACC,KAAD,CAAd;AACD;;AAED,UAAMQ,OAAO,GAAGL,QAAQ,CAACE,IAAD,CAAxB;;AAEA,QAAI,CAACG,OAAL,EAAc;AACZ,aAAOT,OAAO,CAACC,KAAD,CAAd;AACD;;AAED,QAAI,OAAOQ,OAAP,KAAmB,UAAvB,EAAmC;AACjCF,MAAAA,OAAO,CAACC,IAAR,uBAA4BF,IAA5B;AACA,aAAON,OAAO,CAACC,KAAD,CAAd;AACD;;AAED,WAAOF,OAAO,CAACE,KAAD,EAAQS,SAAS,IAAID,OAAO,CAACC,SAAD,EAAYL,MAAZ,EAAoBJ,KAApB,CAA5B,CAAd;AACD,GApBD;AAqBD","sourcesContent":["import produce from 'immer';\n\nfunction DEFAULT(state) {\n  return state;\n}\n\nexport default function createReducer(initialState = {}, reducers) {\n  return function(state = initialState, action) {\n    const { type } = action;\n\n    if (!type) {\n      console.warn('Action without type', action);\n      return DEFAULT(state);\n    }\n\n    const reducer = reducers[type];\n\n    if (!reducer) {\n      return DEFAULT(state);\n    }\n\n    if (typeof reducer !== 'function') {\n      console.warn(`Reducer for ${type} is not a function`);\n      return DEFAULT(state);\n    }\n\n    return produce(state, nextState => reducer(nextState, action, state));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}