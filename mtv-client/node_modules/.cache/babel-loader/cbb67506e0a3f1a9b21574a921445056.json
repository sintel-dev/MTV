{"ast":null,"code":"var _jsxFileName = \"/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/DrawChart.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\n\nclass DrawChart extends Component {\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  getScale(w, h) {\n    let minValue = Number.MAX_SAFE_INTEGER;\n    let maxValue = Number.MIN_SAFE_INTEGER;\n    const timeSeries = this.props.dataRun.timeSeries;\n    const timeSeriesMin = timeSeries[0][0];\n    const timeSeriesMax = timeSeries[timeSeries.length - 1][0];\n    const x = d3.scaleTime().range([0, w]);\n    const y = d3.scaleLinear().range([h, 0]);\n    minValue = minValue > timeSeriesMin ? timeSeriesMin : minValue;\n    maxValue = maxValue < timeSeriesMax ? timeSeriesMax : maxValue;\n    x.domain([minValue, maxValue]);\n    y.domain([-1, 1]);\n    return {\n      x,\n      y\n    };\n  }\n\n  drawChart() {\n    // const width = document.querySelector('.time-row').offsetWidth - 40;\n    // console.log(width);\n    const width = 800;\n    const height = 50;\n    const _this$props$dataRun = this.props.dataRun,\n          timeSeries = _this$props$dataRun.timeSeries,\n          eventWindows = _this$props$dataRun.eventWindows;\n\n    const _this$getScale = this.getScale(width, height),\n          x = _this$getScale.x,\n          y = _this$getScale.y;\n\n    const line = d3.line().x(d => x(d[0])).y(d => y(d[1]));\n    const highlightedEvents = eventWindows.map(event => timeSeries.slice(event[0], event[1] + 2));\n    const svg = d3.select(\"._\".concat(this.props.dataRun.id)).append('svg').attr('width', width).attr('class', 'wave-chart');\n    svg.append('path').attr('class', 'wave-data').attr('d', line(timeSeries));\n    highlightedEvents.map(event => svg.append('path').attr('class', 'wave-event').attr('d', line(event))); // .call(brush.move, x.range());\n  }\n\n  drawBrush() {\n    const width = 800;\n    const height = 50;\n    const brush = d3.brushX().extent([[0, 0], [width, height]]);\n    const svg = d3.select('.wave-chart');\n    const context = svg.append('g').attr('class', 'context');\n    context.append('g').attr('class', 'brush').call(brush);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"_\".concat(this.props.dataRun.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }) // @TODO - find a better way to target this element\n    ;\n  }\n\n}\n\nDrawChart.propTypes = {\n  dataRun: PropTypes.object\n};\nexport default DrawChart;","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/DrawChart.jsx"],"names":["React","Component","PropTypes","d3","DrawChart","componentDidMount","drawChart","getScale","w","h","minValue","Number","MAX_SAFE_INTEGER","maxValue","MIN_SAFE_INTEGER","timeSeries","props","dataRun","timeSeriesMin","timeSeriesMax","length","x","scaleTime","range","y","scaleLinear","domain","width","height","eventWindows","line","d","highlightedEvents","map","event","slice","svg","select","id","append","attr","drawBrush","brush","brushX","extent","context","call","render","propTypes","object"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\n\nclass DrawChart extends Component {\n    componentDidMount() {\n        this.drawChart();\n    }\n\n    getScale(w, h) {\n      let minValue = Number.MAX_SAFE_INTEGER;\n      let maxValue = Number.MIN_SAFE_INTEGER;\n      const { timeSeries } = this.props.dataRun;\n      const timeSeriesMin = timeSeries[0][0];\n      const timeSeriesMax = timeSeries[timeSeries.length - 1][0];\n      const x = d3.scaleTime().range([0, w]);\n      const y = d3.scaleLinear().range([h, 0]);\n\n      minValue = minValue > timeSeriesMin ? timeSeriesMin : minValue;\n      maxValue = maxValue < timeSeriesMax ? timeSeriesMax : maxValue;\n      x.domain([minValue, maxValue]);\n      y.domain([-1, 1]);\n\n      return { x, y };\n    }\n\n    drawChart() {\n      // const width = document.querySelector('.time-row').offsetWidth - 40;\n      // console.log(width);\n\n      const width = 800;\n      const height = 50;\n      const { timeSeries, eventWindows } = this.props.dataRun;\n      const { x, y } = this.getScale(width, height);\n      const line = d3.line()\n        .x(d => x(d[0]))\n        .y(d => y(d[1]));\n\n\n      const highlightedEvents = eventWindows.map(event => timeSeries.slice(event[0], event[1] + 2));\n\n      const svg = d3.select(`._${this.props.dataRun.id}`)\n        .append('svg')\n        .attr('width', width)\n        .attr('class', 'wave-chart');\n\n      svg.append('path')\n        .attr('class', 'wave-data')\n        .attr('d', line(timeSeries));\n\n\n      highlightedEvents.map(event =>\n        svg.append('path')\n          .attr('class', 'wave-event')\n          .attr('d', line(event)),\n        );\n\n\n        // .call(brush.move, x.range());\n    }\n\n    drawBrush () {\n      const width = 800;\n      const height = 50;\n\n      const brush = d3.brushX()\n      .extent([[0, 0], [width, height]]);\n      const svg = d3.select('.wave-chart');\n\n      const context = svg.append('g')\n        .attr('class', 'context');\n\n      context.append('g')\n        .attr('class', 'brush')\n        .call(brush);\n    }\n\n    render() {\n      return (\n        <div className={`_${this.props.dataRun.id}`} /> // @TODO - find a better way to target this element\n      );\n    }\n}\n\nDrawChart.propTypes = {\n  dataRun: PropTypes.object,\n};\n\nexport default DrawChart;\n"]},"metadata":{},"sourceType":"module"}