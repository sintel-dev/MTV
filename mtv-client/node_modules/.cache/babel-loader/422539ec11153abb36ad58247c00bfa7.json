{"ast":null,"code":"import { createSelector } from 'reselect';\nexport const getExperimentsData = state => state.experiments;\nexport const getPipelinesData = state => state.pipelines;\nexport const getDatasets = state => state.datasets;\nexport const getSelectedPipeline = state => state.pipelines.selectedPipelineName;\nexport const getSelectedProjectName = state => state.projects.selectedProject;\nexport const getIsExperimentsLoading = state => state.experiments.isExperimentsLoading;\nexport const getIsProjectsLoading = createSelector([getExperimentsData, getPipelinesData, getDatasets], (experimentsData, pipelinesData, datasets) => experimentsData.ieExperimentsLoading || datasets.isDatasetLoading || pipelinesData.isPipelinesLoading);\n\nconst getSignalNum = projectName => {\n  switch (projectName) {\n    case 'SMAP':\n      return 55;\n\n    case 'MSL':\n      return 27;\n\n    default:\n      // For SES\n      return 71;\n  }\n};\n\nexport const getProjectsList = createSelector([getExperimentsData], experimentsData => {\n  const groupedExperiments = experimentsData.experimentsList.reduce((result, experiment) => {\n    if (!result[experiment.project]) {\n      result[experiment.project] = [];\n    }\n\n    result[experiment.project].push(experiment);\n    return result;\n  }, {});\n  return Object.keys(groupedExperiments).reduce((projects, projectName) => projects.concat({\n    experimentNum: groupedExperiments[projectName].length,\n    experiments: groupedExperiments[projectName],\n    name: projectName,\n    // @TODO - investigate if it's really needed\n    // uniquePipelineNum: countPipelines(projectName),\n    signalNum: getSignalNum(projectName)\n  }), []);\n});\nexport const getFilteredExperiments = createSelector([getSelectedProjectName, getExperimentsData, getSelectedPipeline], (selectedProjectName, experimentsData, selectedPipeline) => experimentsData.experimentsList.filter(experiment => {\n  const isProjectMatch = !selectedProjectName || experiment.project === selectedProjectName;\n  const isPipelineMatch = !selectedPipeline || experiment.pipeline === selectedPipeline;\n  return isProjectMatch && isPipelineMatch;\n}));","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/model/selectors/projects.js"],"names":["createSelector","getExperimentsData","state","experiments","getPipelinesData","pipelines","getDatasets","datasets","getSelectedPipeline","selectedPipelineName","getSelectedProjectName","projects","selectedProject","getIsExperimentsLoading","isExperimentsLoading","getIsProjectsLoading","experimentsData","pipelinesData","ieExperimentsLoading","isDatasetLoading","isPipelinesLoading","getSignalNum","projectName","getProjectsList","groupedExperiments","experimentsList","reduce","result","experiment","project","push","Object","keys","concat","experimentNum","length","name","signalNum","getFilteredExperiments","selectedProjectName","selectedPipeline","filter","isProjectMatch","isPipelineMatch","pipeline"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AAEA,OAAO,MAAMC,kBAAkB,GAAIC,KAAD,IAAWA,KAAK,CAACC,WAA5C;AACP,OAAO,MAAMC,gBAAgB,GAAIF,KAAD,IAAWA,KAAK,CAACG,SAA1C;AACP,OAAO,MAAMC,WAAW,GAAIJ,KAAD,IAAWA,KAAK,CAACK,QAArC;AACP,OAAO,MAAMC,mBAAmB,GAAIN,KAAD,IAAWA,KAAK,CAACG,SAAN,CAAgBI,oBAAvD;AACP,OAAO,MAAMC,sBAAsB,GAAIR,KAAD,IAAWA,KAAK,CAACS,QAAN,CAAeC,eAAzD;AACP,OAAO,MAAMC,uBAAuB,GAAGX,KAAK,IAAIA,KAAK,CAACC,WAAN,CAAkBW,oBAA3D;AAGP,OAAO,MAAMC,oBAAoB,GAAGf,cAAc,CAC9C,CAACC,kBAAD,EAAqBG,gBAArB,EAAuCE,WAAvC,CAD8C,EAE9C,CAACU,eAAD,EAAkBC,aAAlB,EAAiCV,QAAjC,KACIS,eAAe,CAACE,oBAAhB,IAAwCX,QAAQ,CAACY,gBAAjD,IAAqEF,aAAa,CAACG,kBAHzC,CAA3C;;AAKP,MAAMC,YAAY,GAAGC,WAAW,IAAI;AAChC,UAAQA,WAAR;AACI,SAAK,MAAL;AAAa,aAAO,EAAP;;AACb,SAAK,KAAL;AAAY,aAAO,EAAP;;AACZ;AAAS;AACL,aAAO,EAAP;AAJR;AAMH,CAPD;;AASA,OAAO,MAAMC,eAAe,GAAGvB,cAAc,CACzC,CAACC,kBAAD,CADyC,EAClBe,eAAD,IAAqB;AACvC,QAAMQ,kBAAkB,GAAGR,eAAe,CAACS,eAAhB,CAAgCC,MAAhC,CAAuC,CAACC,MAAD,EAASC,UAAT,KAAwB;AACtF,QAAI,CAACD,MAAM,CAACC,UAAU,CAACC,OAAZ,CAAX,EAAiC;AAC7BF,MAAAA,MAAM,CAACC,UAAU,CAACC,OAAZ,CAAN,GAA6B,EAA7B;AACH;;AACDF,IAAAA,MAAM,CAACC,UAAU,CAACC,OAAZ,CAAN,CAA2BC,IAA3B,CAAgCF,UAAhC;AACA,WAAOD,MAAP;AACH,GAN0B,EAMxB,EANwB,CAA3B;AAQA,SAAOI,MAAM,CAACC,IAAP,CAAYR,kBAAZ,EAAgCE,MAAhC,CAAuC,CAACf,QAAD,EAAWW,WAAX,KAA2BX,QAAQ,CAACsB,MAAT,CAAgB;AACrFC,IAAAA,aAAa,EAAEV,kBAAkB,CAACF,WAAD,CAAlB,CAAgCa,MADsC;AAErFhC,IAAAA,WAAW,EAAEqB,kBAAkB,CAACF,WAAD,CAFsD;AAGrFc,IAAAA,IAAI,EAAEd,WAH+E;AAIrF;AACA;AACAe,IAAAA,SAAS,EAAEhB,YAAY,CAACC,WAAD;AAN8D,GAAhB,CAAlE,EAOH,EAPG,CAAP;AAQH,CAlBwC,CAAtC;AAqBP,OAAO,MAAMgB,sBAAsB,GAAGtC,cAAc,CAChD,CAACU,sBAAD,EAAyBT,kBAAzB,EAA6CO,mBAA7C,CADgD,EAEhD,CAAC+B,mBAAD,EAAsBvB,eAAtB,EAAuCwB,gBAAvC,KAA4DxB,eAAe,CAACS,eAAhB,CAAgCgB,MAAhC,CAAuCb,UAAU,IAAI;AAC7G,QAAMc,cAAc,GAAG,CAACH,mBAAD,IAAwBX,UAAU,CAACC,OAAX,KAAuBU,mBAAtE;AACA,QAAMI,eAAe,GAAG,CAACH,gBAAD,IAAqBZ,UAAU,CAACgB,QAAX,KAAwBJ,gBAArE;AACA,SAAOE,cAAc,IAAIC,eAAzB;AACH,CAJ2D,CAFZ,CAA7C","sourcesContent":["import { createSelector } from 'reselect';\n\nexport const getExperimentsData = (state) => state.experiments;\nexport const getPipelinesData = (state) => state.pipelines;\nexport const getDatasets = (state) => state.datasets;\nexport const getSelectedPipeline = (state) => state.pipelines.selectedPipelineName;\nexport const getSelectedProjectName = (state) => state.projects.selectedProject;\nexport const getIsExperimentsLoading = state => state.experiments.isExperimentsLoading;\n\n\nexport const getIsProjectsLoading = createSelector(\n    [getExperimentsData, getPipelinesData, getDatasets],\n    (experimentsData, pipelinesData, datasets) =>\n        experimentsData.ieExperimentsLoading || datasets.isDatasetLoading || pipelinesData.isPipelinesLoading);\n\nconst getSignalNum = projectName => {\n    switch (projectName) {\n        case 'SMAP': return 55;\n        case 'MSL': return 27;\n        default: // For SES\n            return 71;\n    }\n};\n\nexport const getProjectsList = createSelector(\n    [getExperimentsData], (experimentsData) => {\n        const groupedExperiments = experimentsData.experimentsList.reduce((result, experiment) => {\n            if (!result[experiment.project]) {\n                result[experiment.project] = [];\n            }\n            result[experiment.project].push(experiment);\n            return result;\n        }, {});\n\n        return Object.keys(groupedExperiments).reduce((projects, projectName) => projects.concat({\n            experimentNum: groupedExperiments[projectName].length,\n            experiments: groupedExperiments[projectName],\n            name: projectName,\n            // @TODO - investigate if it's really needed\n            // uniquePipelineNum: countPipelines(projectName),\n            signalNum: getSignalNum(projectName),\n        }), []);\n    },\n);\n\nexport const getFilteredExperiments = createSelector(\n    [getSelectedProjectName, getExperimentsData, getSelectedPipeline],\n    (selectedProjectName, experimentsData, selectedPipeline) => experimentsData.experimentsList.filter(experiment => {\n        const isProjectMatch = !selectedProjectName || experiment.project === selectedProjectName;\n        const isPipelineMatch = !selectedPipeline || experiment.pipeline === selectedPipeline;\n        return isProjectMatch && isPipelineMatch;\n    }),\n);\n"]},"metadata":{},"sourceType":"module"}