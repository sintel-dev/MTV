{"ast":null,"code":"var _jsxFileName = \"/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/Datarun.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport DrawChart from './DrawChart';\nimport { selectDatarun } from '../../../model/actions/datarun';\nimport { getSelectedDatarunID } from '../../../model/selectors/datarun';\n\nconst Datarun = ({\n  datarun,\n  isLoading,\n  selectDatarun,\n  selectedDatarunID\n}) => {\n  const activeClass = datarun.id === selectedDatarunID ? 'active' : '';\n  return React.createElement(\"div\", {\n    className: \"time-row \".concat(activeClass),\n    onClick: () => selectDatarun(datarun.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, datarun.signal), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(DrawChart, {\n    dataRun: datarun,\n    isLoading: isLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }))));\n};\n\nDatarun.propTypes = {\n  datarun: PropTypes.object,\n  isLoading: PropTypes.bool,\n  selectDatarun: PropTypes.func,\n  selectedDatarunID: PropTypes.string\n};\nexport default connect(state => ({\n  selectedDatarunID: getSelectedDatarunID(state)\n}), dispatch => ({\n  selectDatarun: datarunID => dispatch(selectDatarun(datarunID))\n}))(Datarun); // export default Datarun;","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/Datarun.jsx"],"names":["React","PropTypes","connect","DrawChart","selectDatarun","getSelectedDatarunID","Datarun","datarun","isLoading","selectedDatarunID","activeClass","id","signal","propTypes","object","bool","func","string","state","dispatch","datarunID"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAASC,aAAT,QAA8B,gCAA9B;AACA,SAASC,oBAAT,QAAqC,kCAArC;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,SAAX;AAAsBJ,EAAAA,aAAtB;AAAqCK,EAAAA;AAArC,CAAD,KAA8D;AAC1E,QAAMC,WAAW,GAAGH,OAAO,CAACI,EAAR,KAAeF,iBAAf,GAAmC,QAAnC,GAA8C,EAAlE;AACA,SACE;AAAK,IAAA,SAAS,qBAAcC,WAAd,CAAd;AAA2C,IAAA,OAAO,EAAE,MAAMN,aAAa,CAACG,OAAO,CAACI,EAAT,CAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKJ,OAAO,CAACK,MAAb,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAI,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAEL,OAApB;AAA6B,IAAA,SAAS,EAAEC,SAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAJ,CAFF,CADF,CADF;AAQH,CAVD;;AAYAF,OAAO,CAACO,SAAR,GAAoB;AAChBN,EAAAA,OAAO,EAAEN,SAAS,CAACa,MADH;AAEhBN,EAAAA,SAAS,EAAEP,SAAS,CAACc,IAFL;AAGhBX,EAAAA,aAAa,EAAEH,SAAS,CAACe,IAHT;AAIhBP,EAAAA,iBAAiB,EAAER,SAAS,CAACgB;AAJb,CAApB;AAOA,eAAef,OAAO,CAACgB,KAAK,KAAK;AAC7BT,EAAAA,iBAAiB,EAAEJ,oBAAoB,CAACa,KAAD;AADV,CAAL,CAAN,EAElBC,QAAQ,KAAK;AACbf,EAAAA,aAAa,EAAGgB,SAAD,IAAeD,QAAQ,CAACf,aAAa,CAACgB,SAAD,CAAd;AADzB,CAAL,CAFU,CAAP,CAIXd,OAJW,CAAf,C,CAMA","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport DrawChart from './DrawChart';\n\nimport { selectDatarun } from '../../../model/actions/datarun';\nimport { getSelectedDatarunID } from '../../../model/selectors/datarun';\n\nconst Datarun = ({ datarun, isLoading, selectDatarun, selectedDatarunID }) => {\n    const activeClass = datarun.id === selectedDatarunID ? 'active' : '';\n    return (\n      <div className={`time-row ${activeClass}`} onClick={() => selectDatarun(datarun.id)}>\n        <ul>\n          <li>{datarun.signal}</li>\n          <li><DrawChart dataRun={datarun} isLoading={isLoading} /></li>\n        </ul>\n      </div>\n  );\n};\n\nDatarun.propTypes = {\n    datarun: PropTypes.object,\n    isLoading: PropTypes.bool,\n    selectDatarun: PropTypes.func,\n    selectedDatarunID: PropTypes.string,\n};\n\nexport default connect(state => ({\n    selectedDatarunID: getSelectedDatarunID(state),\n}), dispatch => ({\n    selectDatarun: (datarunID) => dispatch(selectDatarun(datarunID)),\n}))(Datarun);\n\n// export default Datarun;\n"]},"metadata":{},"sourceType":"module"}