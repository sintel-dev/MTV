{"ast":null,"code":"import _defineProperty from \"/home/sergiu/Projects/mtv-react/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/home/sergiu/Projects/mtv-react/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const api = () => next => async action => {\n  const type = action.type,\n        promise = action.promise,\n        rest = _objectWithoutProperties(action, [\"type\", \"promise\"]);\n\n  if (!promise || !type) {\n    next(action);\n    return;\n  }\n\n  next(_objectSpread({\n    type: \"\".concat(type, \"_REQUEST\"),\n    promise\n  }, rest));\n  debugger;\n\n  try {\n    const result = await promise;\n    next(_objectSpread({\n      type: \"\".concat(type, \"_SUCCESS\"),\n      promise\n    }, rest, {\n      result\n    }));\n  } catch (error) {\n    console.error(error);\n    next(_objectSpread({\n      type: \"\".concat(type, \"_FAILURE\"),\n      promise\n    }, rest, {\n      error: error.message\n    }));\n  }\n};","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/model/store/middlewares.js"],"names":["api","next","action","type","promise","rest","result","error","console","message"],"mappings":";;;;;;;AAAA,OAAO,MAAMA,GAAG,GAAG,MAAMC,IAAI,IAAI,MAAMC,MAAN,IAAgB;AAAA,QACvCC,IADuC,GACZD,MADY,CACvCC,IADuC;AAAA,QACjCC,OADiC,GACZF,MADY,CACjCE,OADiC;AAAA,QACrBC,IADqB,4BACZH,MADY;;AAE/C,MAAI,CAACE,OAAD,IAAY,CAACD,IAAjB,EAAuB;AACrBF,IAAAA,IAAI,CAACC,MAAD,CAAJ;AACA;AACD;;AAEDD,EAAAA,IAAI;AAAGE,IAAAA,IAAI,YAAKA,IAAL,aAAP;AAA4BC,IAAAA;AAA5B,KAAwCC,IAAxC,EAAJ;AACA;;AACA,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMF,OAArB;AACAH,IAAAA,IAAI;AAAGE,MAAAA,IAAI,YAAKA,IAAL,aAAP;AAA4BC,MAAAA;AAA5B,OAAwCC,IAAxC;AAA8CC,MAAAA;AAA9C,OAAJ;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAN,IAAAA,IAAI;AAAGE,MAAAA,IAAI,YAAKA,IAAL,aAAP;AAA4BC,MAAAA;AAA5B,OAAwCC,IAAxC;AAA8CE,MAAAA,KAAK,EAAEA,KAAK,CAACE;AAA3D,OAAJ;AACD;AACF,CAhBM","sourcesContent":["export const api = () => next => async action => {\n  const { type, promise, ...rest } = action;\n  if (!promise || !type) {\n    next(action);\n    return;\n  }\n\n  next({ type: `${type}_REQUEST`, promise, ...rest });\n  debugger;\n  try {\n    const result = await promise;\n    next({ type: `${type}_SUCCESS`, promise, ...rest, result });\n  } catch (error) {\n    console.error(error);\n    next({ type: `${type}_FAILURE`, promise, ...rest, error: error.message });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}