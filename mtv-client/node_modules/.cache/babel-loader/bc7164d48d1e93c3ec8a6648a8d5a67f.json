{"ast":null,"code":"var _jsxFileName = \"/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/DrawChart.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\n\nclass DrawChart extends Component {\n  componentDidMount() {\n    this.svgRoot = React.createRef();\n    this.drawChart();\n  }\n\n  getScale(w, h) {\n    let minValue = Number.MAX_SAFE_INTEGER;\n    let maxValue = Number.MIN_SAFE_INTEGER;\n    const timeSeries = this.props.dataRun.timeSeries;\n    const timeSeriesMin = timeSeries[0][0];\n    const timeSeriesMax = timeSeries[timeSeries.length - 1][0];\n    minValue = minValue > timeSeriesMin ? timeSeriesMin : minValue;\n    maxValue = maxValue < timeSeriesMax ? timeSeriesMax : maxValue;\n    const x = d3.scaleTime().range([0, w]); // x.domain([1222819200000, 1468864800000]);\n\n    x.domain([new Date(minValue, new Date(maxValue))]);\n    const y = d3.scaleLinear().range([h, 0]);\n    y.domain([-1, 1]);\n    return {\n      x,\n      y\n    };\n  }\n\n  drawChart() {\n    const timeSeries = this.props.dataRun.timeSeries;\n    const stroke = 'rgb(36, 116, 241, 0.7)';\n    const strokeWidth = 0.5;\n    const h = 50;\n\n    const _this$getScale = this.getScale(900, h),\n          x = _this$getScale.x,\n          y = _this$getScale.y;\n\n    const line = d3.line().x(d => x(d[0])).y(d => y(d[1]));\n    const svg = d3.select(\"._\".concat(this.props.dataRun.id)).append('svg').attr('width', '100%').attr('height', h);\n    svg.append('path').attr('stroke', stroke).attr('fill', 'transparent').attr('stroke-width', strokeWidth).attr('class', 'line-data').attr('d', line(timeSeries));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"_\".concat(this.props.dataRun.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    });\n  }\n\n}\n\nDrawChart.propTypes = {\n  dataRun: PropTypes.object\n};\nexport default DrawChart;","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/DrawChart.jsx"],"names":["React","Component","PropTypes","d3","DrawChart","componentDidMount","svgRoot","createRef","drawChart","getScale","w","h","minValue","Number","MAX_SAFE_INTEGER","maxValue","MIN_SAFE_INTEGER","timeSeries","props","dataRun","timeSeriesMin","timeSeriesMax","length","x","scaleTime","range","domain","Date","y","scaleLinear","stroke","strokeWidth","line","d","svg","select","id","append","attr","render","propTypes","object"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\n\nclass DrawChart extends Component {\n    componentDidMount() {\n        this.svgRoot = React.createRef();\n        this.drawChart();\n    }\n\n    getScale(w, h) {\n      let minValue = Number.MAX_SAFE_INTEGER;\n      let maxValue = Number.MIN_SAFE_INTEGER;\n      const { timeSeries } = this.props.dataRun;\n      const timeSeriesMin = timeSeries[0][0];\n      const timeSeriesMax = timeSeries[timeSeries.length - 1][0];\n\n      minValue = minValue > timeSeriesMin ? timeSeriesMin : minValue;\n      maxValue = maxValue < timeSeriesMax ? timeSeriesMax : maxValue;\n\n      const x = d3.scaleTime().range([0, w]);\n\n      // x.domain([1222819200000, 1468864800000]);\n      x.domain([new Date(minValue, new Date(maxValue))]);\n\n      const y = d3.scaleLinear().range([h, 0]);\n      y.domain([-1, 1]);\n      return { x, y };\n    }\n\n    drawChart() {\n      const { timeSeries } = this.props.dataRun;\n      const stroke = 'rgb(36, 116, 241, 0.7)';\n      const strokeWidth = 0.5;\n\n      const h = 50;\n      const { x, y } = this.getScale(900, h);\n      const line = d3.line()\n        .x(d => x(d[0]))\n        .y(d => y(d[1]));\n\n\n      const svg = d3.select(`._${this.props.dataRun.id}`)\n        .append('svg')\n        .attr('width', '100%')\n        .attr('height', h);\n\n      svg.append('path')\n        .attr('stroke', stroke)\n        .attr('fill', 'transparent')\n        .attr('stroke-width', strokeWidth)\n        .attr('class', 'line-data')\n        .attr('d', line(timeSeries));\n    }\n\n    render() {\n      return (\n        <div className={`_${this.props.dataRun.id}`} />\n      );\n    }\n}\n\nDrawChart.propTypes = {\n  dataRun: PropTypes.object,\n};\n\nexport default DrawChart;\n"]},"metadata":{},"sourceType":"module"}