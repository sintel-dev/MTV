{"ast":null,"code":"var _jsxFileName = \"/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/DrawChart.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\n\nclass DrawChart extends Component {\n  componentDidMount() {\n    this.svgRoot = React.createRef();\n    this.drawChart();\n  }\n\n  getScale(w, h) {\n    let minValue = Math.MAX_SAFE_INTEGER;\n    let maxValue = Math.MIN_SAFE_INTEGER;\n    const x = d3.scaleTime().range([0, w]);\n    x.domain([1222819200000, 1468864800000]);\n    const y = d3.scaleLinear().range([h, 0]);\n    y.domain([-1, 1]);\n    return {\n      x,\n      y\n    };\n  }\n\n  drawChart() {\n    const timeSeries = this.props.dataRun.timeSeries;\n    const stroke = 'rgb(36, 116, 241, 0.7)';\n    const strokeWidth = 0.5;\n    const h = 50;\n\n    const _this$getScale = this.getScale(900, h),\n          x = _this$getScale.x,\n          y = _this$getScale.y;\n\n    const line = d3.line().x(d => x(d[0])).y(d => y(d[1]));\n    const svg = d3.select(\"._\".concat(this.props.dataRun.id)).append('svg').attr('width', '100%').attr('height', h);\n    svg.append('path').attr('stroke', stroke).attr('fill', 'transparent').attr('stroke-width', strokeWidth).attr('class', 'line-data').attr('d', line(timeSeries));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"_\".concat(this.props.dataRun.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    });\n  }\n\n}\n\nDrawChart.propTypes = {\n  dataRun: PropTypes.object\n};\nexport default DrawChart;","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/DrawChart.jsx"],"names":["React","Component","PropTypes","d3","DrawChart","componentDidMount","svgRoot","createRef","drawChart","getScale","w","h","minValue","Math","MAX_SAFE_INTEGER","maxValue","MIN_SAFE_INTEGER","x","scaleTime","range","domain","y","scaleLinear","timeSeries","props","dataRun","stroke","strokeWidth","line","d","svg","select","id","append","attr","render","propTypes","object"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;AAEA,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AAC9BI,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,OAAL,GAAeN,KAAK,CAACO,SAAN,EAAf;AACA,SAAKC,SAAL;AACH;;AAEDC,EAAAA,QAAQ,CAACC,CAAD,EAAIC,CAAJ,EAAO;AACb,QAAIC,QAAQ,GAAGC,IAAI,CAACC,gBAApB;AACA,QAAIC,QAAQ,GAAGF,IAAI,CAACG,gBAApB;AACA,UAAMC,CAAC,GAAGd,EAAE,CAACe,SAAH,GAAeC,KAAf,CAAqB,CAAC,CAAD,EAAIT,CAAJ,CAArB,CAAV;AACAO,IAAAA,CAAC,CAACG,MAAF,CAAS,CAAC,aAAD,EAAgB,aAAhB,CAAT;AAEA,UAAMC,CAAC,GAAGlB,EAAE,CAACmB,WAAH,GAAiBH,KAAjB,CAAuB,CAACR,CAAD,EAAI,CAAJ,CAAvB,CAAV;AACAU,IAAAA,CAAC,CAACD,MAAF,CAAS,CAAC,CAAC,CAAF,EAAK,CAAL,CAAT;AACA,WAAO;AAAEH,MAAAA,CAAF;AAAKI,MAAAA;AAAL,KAAP;AACD;;AAEDb,EAAAA,SAAS,GAAG;AAAA,UACFe,UADE,GACa,KAAKC,KAAL,CAAWC,OADxB,CACFF,UADE;AAEV,UAAMG,MAAM,GAAG,wBAAf;AACA,UAAMC,WAAW,GAAG,GAApB;AAEA,UAAMhB,CAAC,GAAG,EAAV;;AALU,2BAMO,KAAKF,QAAL,CAAc,GAAd,EAAmBE,CAAnB,CANP;AAAA,UAMFM,CANE,kBAMFA,CANE;AAAA,UAMCI,CAND,kBAMCA,CAND;;AAOV,UAAMO,IAAI,GAAGzB,EAAE,CAACyB,IAAH,GACVX,CADU,CACRY,CAAC,IAAIZ,CAAC,CAACY,CAAC,CAAC,CAAD,CAAF,CADE,EAEVR,CAFU,CAERQ,CAAC,IAAIR,CAAC,CAACQ,CAAC,CAAC,CAAD,CAAF,CAFE,CAAb;AAKA,UAAMC,GAAG,GAAG3B,EAAE,CAAC4B,MAAH,aAAe,KAAKP,KAAL,CAAWC,OAAX,CAAmBO,EAAlC,GACTC,MADS,CACF,KADE,EAETC,IAFS,CAEJ,OAFI,EAEK,MAFL,EAGTA,IAHS,CAGJ,QAHI,EAGMvB,CAHN,CAAZ;AAKAmB,IAAAA,GAAG,CAACG,MAAJ,CAAW,MAAX,EACGC,IADH,CACQ,QADR,EACkBR,MADlB,EAEGQ,IAFH,CAEQ,MAFR,EAEgB,aAFhB,EAGGA,IAHH,CAGQ,cAHR,EAGwBP,WAHxB,EAIGO,IAJH,CAIQ,OAJR,EAIiB,WAJjB,EAKGA,IALH,CAKQ,GALR,EAKaN,IAAI,CAACL,UAAD,CALjB;AAMD;;AAEDY,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,aAAM,KAAKX,KAAL,CAAWC,OAAX,CAAmBO,EAAzB,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AA9C6B;;AAiDlC5B,SAAS,CAACgC,SAAV,GAAsB;AACpBX,EAAAA,OAAO,EAAEvB,SAAS,CAACmC;AADC,CAAtB;AAIA,eAAejC,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\n\nclass DrawChart extends Component {\n    componentDidMount() {\n        this.svgRoot = React.createRef();\n        this.drawChart();\n    }\n\n    getScale(w, h) {\n      let minValue = Math.MAX_SAFE_INTEGER;\n      let maxValue = Math.MIN_SAFE_INTEGER;\n      const x = d3.scaleTime().range([0, w]);\n      x.domain([1222819200000, 1468864800000]);\n\n      const y = d3.scaleLinear().range([h, 0]);\n      y.domain([-1, 1]);\n      return { x, y };\n    }\n\n    drawChart() {\n      const { timeSeries } = this.props.dataRun;\n      const stroke = 'rgb(36, 116, 241, 0.7)';\n      const strokeWidth = 0.5;\n\n      const h = 50;\n      const { x, y } = this.getScale(900, h);\n      const line = d3.line()\n        .x(d => x(d[0]))\n        .y(d => y(d[1]));\n\n\n      const svg = d3.select(`._${this.props.dataRun.id}`)\n        .append('svg')\n        .attr('width', '100%')\n        .attr('height', h);\n\n      svg.append('path')\n        .attr('stroke', stroke)\n        .attr('fill', 'transparent')\n        .attr('stroke-width', strokeWidth)\n        .attr('class', 'line-data')\n        .attr('d', line(timeSeries));\n    }\n\n    render() {\n      return (\n        <div className={`_${this.props.dataRun.id}`} />\n      );\n    }\n}\n\nDrawChart.propTypes = {\n  dataRun: PropTypes.object,\n};\n\nexport default DrawChart;\n"]},"metadata":{},"sourceType":"module"}