{"ast":null,"code":"var _jsxFileName = \"/home/sergiu/Projects/mtv-react/src/components/Landing/Pipelines.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Loader from '../Common/Loader';\nimport { getPipelinesData, getSelectedPipeline } from '../../model/selectors/projects';\nimport { selectPipeline } from '../../model/actions/landing';\n\nconst renderPipeline = (pipeline, index, onPipelineSelect, selectedPipeline = 'lstm') => React.createElement(\"div\", {\n  className: \"cell \".concat(selectedPipeline.pipelineName === pipeline.name),\n  key: index,\n  onClick: () => onPipelineSelect(pipeline.name),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8\n  },\n  __self: this\n}, React.createElement(\"h3\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9\n  },\n  __self: this\n}, pipeline.name), React.createElement(\"div\", {\n  className: \"item-data\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}, React.createElement(\"ul\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}, React.createElement(\"li\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, \"DC: \", pipeline.insert_time.substring(0, 10)), React.createElement(\"li\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}, \"By: \", pipeline.created_by || 'null'))));\n\nconst Pipelines = props => {\n  const _props$pipelinesData = props.pipelinesData,\n        pipelineList = _props$pipelinesData.pipelineList,\n        isPipelinesLoading = _props$pipelinesData.isPipelinesLoading;\n  const onSelectPipeline = props.onSelectPipeline,\n        selectedPipeline = props.selectedPipeline;\n  return React.createElement(\"div\", {\n    className: \"item-row scroll-style\",\n    id: \"pipelines\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Pipelines\"), React.createElement(\"div\", {\n    className: \"item-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(Loader, {\n    isLoading: isPipelinesLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, pipelineList.length ? pipelineList.map((pipeline, index) => renderPipeline(pipeline, index, onSelectPipeline, selectedPipeline.pipelineName)) : React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"No pipelines have been found\"))));\n};\n\nPipelines.propTypes = {\n  pipelinesData: PropTypes.object,\n  onSelectPipeline: PropTypes.func\n};\nexport default connect(state => ({\n  pipelinesData: getPipelinesData(state),\n  selectedPipeline: getSelectedPipeline(state)\n}), dispatch => ({\n  onSelectPipeline: pipelineName => dispatch(selectPipeline(pipelineName))\n}))(Pipelines); // export default Pipelines;","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Landing/Pipelines.jsx"],"names":["React","PropTypes","connect","Loader","getPipelinesData","getSelectedPipeline","selectPipeline","renderPipeline","pipeline","index","onPipelineSelect","selectedPipeline","pipelineName","name","insert_time","substring","created_by","Pipelines","props","pipelinesData","pipelineList","isPipelinesLoading","onSelectPipeline","length","map","propTypes","object","func","state","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,QAAsD,gCAAtD;AACA,SAASC,cAAT,QAA+B,6BAA/B;;AAEA,MAAMC,cAAc,GAAG,CAACC,QAAD,EAAWC,KAAX,EAAkBC,gBAAlB,EAAoCC,gBAAgB,GAAG,MAAvD,KAAmE;AAAK,EAAA,SAAS,iBAAUA,gBAAgB,CAACC,YAAjB,KAAkCJ,QAAQ,CAACK,IAArD,CAAd;AAA2E,EAAA,GAAG,EAAEJ,KAAhF;AAAuF,EAAA,OAAO,EAAE,MAAMC,gBAAgB,CAACF,QAAQ,CAACK,IAAV,CAAtH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAKL,QAAQ,CAACK,IAAd,CADwF,EAExF;AAAK,EAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAASL,QAAQ,CAACM,WAAT,CAAqBC,SAArB,CAA+B,CAA/B,EAAkC,EAAlC,CAAT,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAASP,QAAQ,CAACQ,UAAT,IAAuB,MAAhC,CAFF,CADF,CAFwF,CAA1F;;AAWA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA,+BACkBA,KAAK,CAACC,aADxB;AAAA,QACnBC,YADmB,wBACnBA,YADmB;AAAA,QACLC,kBADK,wBACLA,kBADK;AAAA,QAEnBC,gBAFmB,GAEoBJ,KAFpB,CAEnBI,gBAFmB;AAAA,QAEDX,gBAFC,GAEoBO,KAFpB,CAEDP,gBAFC;AAI3B,SACE;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAuC,IAAA,EAAE,EAAC,WAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAEU,kBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEID,YAAY,CAACG,MAAb,GACEH,YAAY,CAACI,GAAb,CAAiB,CAAChB,QAAD,EAAWC,KAAX,KACjBF,cAAc,CAACC,QAAD,EAAWC,KAAX,EAAkBa,gBAAlB,EAAoCX,gBAAgB,CAACC,YAArD,CADd,CADF,GAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCALN,CADF,CAFF,CADF;AAeD,CAnBD;;AAqBAK,SAAS,CAACQ,SAAV,GAAsB;AACpBN,EAAAA,aAAa,EAAElB,SAAS,CAACyB,MADL;AAEpBJ,EAAAA,gBAAgB,EAAErB,SAAS,CAAC0B;AAFR,CAAtB;AAKA,eAAezB,OAAO,CAAC0B,KAAK,KAAK;AAC/BT,EAAAA,aAAa,EAAEf,gBAAgB,CAACwB,KAAD,CADA;AAE/BjB,EAAAA,gBAAgB,EAAEN,mBAAmB,CAACuB,KAAD;AAFN,CAAL,CAAN,EAGlBC,QAAQ,KAAK;AACfP,EAAAA,gBAAgB,EAAGV,YAAD,IAAkBiB,QAAQ,CAACvB,cAAc,CAACM,YAAD,CAAf;AAD7B,CAAL,CAHU,CAAP,CAKXK,SALW,CAAf,C,CAOA","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Loader from '../Common/Loader';\nimport { getPipelinesData, getSelectedPipeline } from '../../model/selectors/projects';\nimport { selectPipeline } from '../../model/actions/landing';\n\nconst renderPipeline = (pipeline, index, onPipelineSelect, selectedPipeline = 'lstm') => (<div className={`cell ${selectedPipeline.pipelineName === pipeline.name}`} key={index} onClick={() => onPipelineSelect(pipeline.name)}>\n  <h3>{pipeline.name}</h3>\n  <div className=\"item-data\">\n    <ul>\n      <li>DC: {pipeline.insert_time.substring(0, 10)}</li>\n      <li>By: {pipeline.created_by || 'null' }</li>\n    </ul>\n  </div>\n</div>\n  );\n\nconst Pipelines = (props) => {\n  const { pipelineList, isPipelinesLoading } = props.pipelinesData;\n  const { onSelectPipeline, selectedPipeline } = props;\n\n  return (\n    <div className=\"item-row scroll-style\" id=\"pipelines\">\n      <h2>Pipelines</h2>\n      <div className=\"item-wrapper\">\n        <Loader isLoading={isPipelinesLoading}>\n          {\n            pipelineList.length ?\n              pipelineList.map((pipeline, index) =>\n              renderPipeline(pipeline, index, onSelectPipeline, selectedPipeline.pipelineName)) :\n              <p>No pipelines have been found</p>\n          }\n        </Loader>\n      </div>\n    </div>\n  );\n};\n\nPipelines.propTypes = {\n  pipelinesData: PropTypes.object,\n  onSelectPipeline: PropTypes.func,\n};\n\nexport default connect(state => ({\n  pipelinesData: getPipelinesData(state),\n  selectedPipeline: getSelectedPipeline(state),\n}), dispatch => ({\n  onSelectPipeline: (pipelineName) => dispatch(selectPipeline(pipelineName)),\n}))(Pipelines);\n\n// export default Pipelines;\n"]},"metadata":{},"sourceType":"module"}