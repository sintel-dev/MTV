{"ast":null,"code":"var _jsxFileName = \"/home/sergiu/Projects/mtv-react/src/components/Landing/Experiments.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Loader from '../Common/Loader';\nimport { getFilteredExperiments, getIsExperimentsLoading, getSelectedPipeline } from '../../model/selectors/projects';\nimport { selectExperiment } from '../../model/actions/landing';\n\nconst renderExperiment = (experiment, index, onSelectExperiment, selectedPipeline) => {\n  const activeClass = selectedPipeline ? 'active' : '';\n  return React.createElement(\"div\", {\n    className: \"cell \".concat(activeClass),\n    key: index,\n    onClick: () => onSelectExperiment(experiment.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"#\", index + 1, \" \", experiment.dataset, \"_\", experiment.pipeline), React.createElement(\"div\", {\n    className: \"item-data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Signals: \", experiment.dataruns.length), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"DC: \", experiment.date_creation.substring(0, 10)))));\n};\n\nconst Experiments = ({\n  isExperimentsLoading,\n  filteredExperiments,\n  onSelectExperiment,\n  selectedPipeline\n}) => React.createElement(\"div\", {\n  className: \"item-row scroll-style\",\n  id: \"experiments\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29\n  },\n  __self: this\n}, console.log(filteredExperiments), React.createElement(\"h2\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31\n  },\n  __self: this\n}, \"Experiments\"), React.createElement(\"div\", {\n  className: \"item-wrapper\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32\n  },\n  __self: this\n}, React.createElement(Loader, {\n  isLoading: isExperimentsLoading,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33\n  },\n  __self: this\n}, filteredExperiments.length ? filteredExperiments.map((experiment, index) => renderExperiment(experiment, index, onSelectExperiment, selectedPipeline)) : React.createElement(\"h2\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38\n  },\n  __self: this\n}, \"No experiments found\"))));\n\nExperiments.propTypes = {\n  filteredExperiments: PropTypes.array,\n  isExperimentsLoading: PropTypes.bool,\n  onSelectExperiment: PropTypes.func,\n  selectedPipeline: PropTypes.string\n};\nexport default connect(state => ({\n  filteredExperiments: getFilteredExperiments(state),\n  isExperimentsLoading: getIsExperimentsLoading(state),\n  selectedPipeline: getSelectedPipeline(state)\n}), dispatch => ({\n  onSelectExperiment: experiment => dispatch(selectExperiment(experiment))\n}))(Experiments);","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Landing/Experiments.jsx"],"names":["React","PropTypes","connect","Loader","getFilteredExperiments","getIsExperimentsLoading","getSelectedPipeline","selectExperiment","renderExperiment","experiment","index","onSelectExperiment","selectedPipeline","activeClass","id","dataset","pipeline","dataruns","length","date_creation","substring","Experiments","isExperimentsLoading","filteredExperiments","console","log","map","propTypes","array","bool","func","string","state","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Loader from '../Common/Loader';\nimport {\n  getFilteredExperiments,\n  getIsExperimentsLoading,\n  getSelectedPipeline,\n} from '../../model/selectors/projects';\nimport { selectExperiment } from '../../model/actions/landing';\n\n\nconst renderExperiment = (experiment, index, onSelectExperiment, selectedPipeline) => {\n  const activeClass = selectedPipeline ? 'active' : '';\n  return (\n    <div className={`cell ${activeClass}`} key={index} onClick={() => onSelectExperiment(experiment.id)}>\n      <h3>#{index + 1} {experiment.dataset}_{experiment.pipeline}</h3>\n      <div className=\"item-data\">\n        <ul>\n          <li>Signals: {experiment.dataruns.length}</li>\n          <li>DC: {experiment.date_creation.substring(0, 10)}</li>\n        </ul>\n      </div>\n    </div>);\n};\n\nconst Experiments = ({ isExperimentsLoading, filteredExperiments, onSelectExperiment, selectedPipeline }) => (\n\n  <div className=\"item-row scroll-style\" id=\"experiments\">\n    {console.log(filteredExperiments)}\n    <h2>Experiments</h2>\n    <div className=\"item-wrapper\">\n      <Loader isLoading={isExperimentsLoading}>\n        {\n          filteredExperiments.length ?\n            filteredExperiments.map((experiment, index) =>\n            renderExperiment(experiment, index, onSelectExperiment, selectedPipeline)) :\n            <h2>No experiments found</h2>\n          }\n      </Loader>\n    </div>\n  </div>);\n\nExperiments.propTypes = {\n  filteredExperiments: PropTypes.array,\n  isExperimentsLoading: PropTypes.bool,\n  onSelectExperiment: PropTypes.func,\n  selectedPipeline: PropTypes.string,\n};\n\nexport default connect(state => ({\n  filteredExperiments: getFilteredExperiments(state),\n  isExperimentsLoading: getIsExperimentsLoading(state),\n  selectedPipeline: getSelectedPipeline(state),\n}), dispatch => ({\n  onSelectExperiment: (experiment) => dispatch(selectExperiment(experiment)),\n}))(Experiments);\n"]},"metadata":{},"sourceType":"module"}