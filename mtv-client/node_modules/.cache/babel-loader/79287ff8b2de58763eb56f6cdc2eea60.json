{"ast":null,"code":"var _jsxFileName = \"/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/Experiment.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './Overview.scss';\nimport { getSelectedExperimentData, getProcessedDataRun } from '../../../model/selectors/experiment';\nimport Loader from '../../Common/Loader';\nimport DrawChart from './DrawChart';\nlet selectedChart = null;\n\nconst onSelectDatarun = datarun => {\n  console.log(selectedChart);\n  debugger;\n  document.querySelector('.active').classList.remove('.active');\n  selectedChart.classList.add('active'); // event.target.classList.add('active');\n};\n\nconst Datarun = ({\n  datarun,\n  isLoading\n}) => React.createElement(\"div\", {\n  className: \"time-row\",\n  onClick: () => onSelectDatarun(datarun),\n  ref: currentChart => {\n    selectedChart = currentChart;\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}, React.createElement(\"ul\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22\n  },\n  __self: this\n}, React.createElement(\"li\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23\n  },\n  __self: this\n}, datarun.signal), React.createElement(\"li\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24\n  },\n  __self: this\n}, React.createElement(DrawChart, {\n  dataRun: datarun,\n  isLoading: isLoading,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24\n  },\n  __self: this\n}))));\n\nfunction Experiment({\n  experimentData,\n  processedDatarun\n}) {\n  return React.createElement(\"div\", {\n    className: \"overview-wrapper scroll-style\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(Loader, {\n    isLoading: experimentData.isExperimentDataLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, !experimentData.isExperimentDataLoading && experimentData.data.dataruns.length ? processedDatarun.map(datarun => React.createElement(Datarun, {\n    datarun: datarun,\n    key: datarun.id,\n    isLoading: experimentData.isExperimentDataLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  })) : React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"No datarun for this experiment\")));\n}\n\nExperiment.propTypes = {\n  experimentData: PropTypes.object,\n  processedDatarun: PropTypes.array\n};\nexport default connect(state => ({\n  experimentData: getSelectedExperimentData(state),\n  processedDatarun: getProcessedDataRun(state)\n}), null)(Experiment);","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/Experiment.jsx"],"names":["React","connect","PropTypes","getSelectedExperimentData","getProcessedDataRun","Loader","DrawChart","selectedChart","onSelectDatarun","datarun","console","log","document","querySelector","classList","remove","add","Datarun","isLoading","currentChart","signal","Experiment","experimentData","processedDatarun","isExperimentDataLoading","data","dataruns","length","map","id","propTypes","object","array","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,iBAAP;AAEA,SAASC,yBAAT,EAAoCC,mBAApC,QAA+D,qCAA/D;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,IAAIC,aAAa,GAAG,IAApB;;AAEA,MAAMC,eAAe,GAAIC,OAAD,IAAa;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,aAAZ;AACA;AACAK,EAAAA,QAAQ,CAACC,aAAT,CAAuB,SAAvB,EAAkCC,SAAlC,CAA4CC,MAA5C,CAAmD,SAAnD;AACAR,EAAAA,aAAa,CAACO,SAAd,CAAwBE,GAAxB,CAA4B,QAA5B,EAJmC,CAKnC;AACD,CAND;;AAQA,MAAMC,OAAO,GAAG,CAAC;AAAER,EAAAA,OAAF;AAAWS,EAAAA;AAAX,CAAD,KACd;AAAK,EAAA,SAAS,EAAC,UAAf;AAA0B,EAAA,OAAO,EAAE,MAAMV,eAAe,CAACC,OAAD,CAAxD;AAAmE,EAAA,GAAG,EAAGU,YAAD,IAAkB;AAAEZ,IAAAA,aAAa,GAAGY,YAAhB;AAA+B,GAA3H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAKV,OAAO,CAACW,MAAb,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAI,oBAAC,SAAD;AAAW,EAAA,OAAO,EAAEX,OAApB;AAA6B,EAAA,SAAS,EAAES,SAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAJ,CAFF,CADF,CADF;;AAQA,SAASG,UAAT,CAAoB;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA;AAAlB,CAApB,EAA0D;AACtD,SACE;AAAK,IAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAED,cAAc,CAACE,uBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,CAACF,cAAc,CAACE,uBAAhB,IAA2CF,cAAc,CAACG,IAAf,CAAoBC,QAApB,CAA6BC,MAAxE,GACEJ,gBAAgB,CAACK,GAAjB,CAAqBnB,OAAO,IAAI,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAEA,OAAlB;AAA2B,IAAA,GAAG,EAAEA,OAAO,CAACoB,EAAxC;AAA4C,IAAA,SAAS,EAAEP,cAAc,CAACE,uBAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAhC,CADF,GAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAJN,CADF,CADF;AAWH;;AAEDH,UAAU,CAACS,SAAX,GAAuB;AACnBR,EAAAA,cAAc,EAAEpB,SAAS,CAAC6B,MADP;AAEnBR,EAAAA,gBAAgB,EAAErB,SAAS,CAAC8B;AAFT,CAAvB;AAKA,eAAe/B,OAAO,CAACgC,KAAK,KAAK;AAC7BX,EAAAA,cAAc,EAAEnB,yBAAyB,CAAC8B,KAAD,CADZ;AAE7BV,EAAAA,gBAAgB,EAAEnB,mBAAmB,CAAC6B,KAAD;AAFR,CAAL,CAAN,EAGlB,IAHkB,CAAP,CAGLZ,UAHK,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './Overview.scss';\n\nimport { getSelectedExperimentData, getProcessedDataRun } from '../../../model/selectors/experiment';\nimport Loader from '../../Common/Loader';\nimport DrawChart from './DrawChart';\n\nlet selectedChart = null;\n\nconst onSelectDatarun = (datarun) => {\n  console.log(selectedChart);\n  debugger;\n  document.querySelector('.active').classList.remove('.active');\n  selectedChart.classList.add('active');\n  // event.target.classList.add('active');\n};\n\nconst Datarun = ({ datarun, isLoading }) => (\n  <div className=\"time-row\" onClick={() => onSelectDatarun(datarun)} ref={(currentChart) => { selectedChart = currentChart; }}>\n    <ul>\n      <li>{datarun.signal}</li>\n      <li><DrawChart dataRun={datarun} isLoading={isLoading} /></li>\n    </ul>\n  </div>);\n\nfunction Experiment({ experimentData, processedDatarun }) {\n    return (\n      <div className=\"overview-wrapper scroll-style\">\n        <Loader isLoading={experimentData.isExperimentDataLoading}>\n          {\n            !experimentData.isExperimentDataLoading && experimentData.data.dataruns.length ?\n              processedDatarun.map(datarun => <Datarun datarun={datarun} key={datarun.id} isLoading={experimentData.isExperimentDataLoading} />) :\n              <p>No datarun for this experiment</p>\n          }\n        </Loader>\n      </div>\n    );\n}\n\nExperiment.propTypes = {\n    experimentData: PropTypes.object,\n    processedDatarun: PropTypes.array,\n};\n\nexport default connect(state => ({\n    experimentData: getSelectedExperimentData(state),\n    processedDatarun: getProcessedDataRun(state),\n}), null)(Experiment);\n"]},"metadata":{},"sourceType":"module"}