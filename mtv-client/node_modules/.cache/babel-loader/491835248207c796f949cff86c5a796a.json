{"ast":null,"code":"import * as d3 from 'd3';\n\nfunction getScale(width, height, dataRun) {\n  let minValue = Number.MAX_SAFE_INTEGER;\n  let maxValue = Number.MIN_SAFE_INTEGER;\n  const timeSeries = dataRun.timeSeries;\n  const timeSeriesMin = timeSeries[0][0];\n  const timeSeriesMax = timeSeries[timeSeries.length - 1][0];\n  const x = d3.scaleTime().range([0, width]);\n  const y = d3.scaleLinear().range([height, 0]);\n  minValue = minValue > timeSeriesMin ? timeSeriesMin : minValue;\n  maxValue = maxValue < timeSeriesMax ? timeSeriesMax : maxValue;\n  x.domain([minValue, maxValue]);\n  y.domain([-1, 1]);\n  return {\n    x,\n    y\n  };\n}\n\nfunction drawBrush(element, width, onPeriodTimeChange, selectedPeriod) {\n  width -= 25;\n  const brushHeight = 43;\n  const xRange = d3.scaleTime().range([0, width]);\n  const brush = d3.brushX().extent([[0, 0], [width, brushHeight]]);\n  const brushContext = element.append('g').attr('class', 'brushContext');\n  brushContext.append('g').attr('class', 'brush').attr('transform', 'translate(5, 3)').call(brush).call(brush.move, xRange.range());\n\n  const onBrushChange = () => {\n    if (d3.event.sourceEvent && d3.event.sourceEvent.type === 'zoom') return;\n    onPeriodTimeChange(d3.event.selection);\n  };\n\n  brush.on('brush end', onBrushChange);\n}\n\nexport function updateChart(selectedPeriod) {\n  const xRange = d3.scaleTime().range([0, 500]);\n  const brushContext = d3.selectAll('.brush');\n  const brush = d3.brushX().extent([[0, 0], [500, 40]]);\n  debugger; // brushContext\n  //   .call(brush)\n  //   .call(brush.move, xRange.range());\n  // console.log(selectedPeriod);\n}\nexport function drawChart(width, height, dataRun, onPeriodTimeChange, selectedPeriod) {\n  const chartWidth = width - 35;\n  const timeSeries = dataRun.timeSeries,\n        eventWindows = dataRun.eventWindows;\n\n  const _getScale = getScale(chartWidth, height, dataRun),\n        x = _getScale.x,\n        y = _getScale.y;\n\n  const line = d3.line().x(d => x(d[0])).y(d => y(d[1]));\n  const highlightedEvents = eventWindows.map(event => timeSeries.slice(event[0], event[1] + 2));\n  const svg = d3.select(\"._\".concat(dataRun.id)).append('svg').attr('width', chartWidth).attr('class', 'wave-chart');\n  svg.append('path').attr('class', 'wave-data').attr('d', line(timeSeries)).attr('transform', 'translate(10, 6)');\n  highlightedEvents.map(event => svg.append('path').attr('class', 'wave-event').attr('transform', 'translate(10, 6)').attr('d', line(event)));\n  drawBrush(svg, width, onPeriodTimeChange, selectedPeriod);\n}","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/chartUtils.js"],"names":["d3","getScale","width","height","dataRun","minValue","Number","MAX_SAFE_INTEGER","maxValue","MIN_SAFE_INTEGER","timeSeries","timeSeriesMin","timeSeriesMax","length","x","scaleTime","range","y","scaleLinear","domain","drawBrush","element","onPeriodTimeChange","selectedPeriod","brushHeight","xRange","brush","brushX","extent","brushContext","append","attr","call","move","onBrushChange","event","sourceEvent","type","selection","on","updateChart","selectAll","drawChart","chartWidth","eventWindows","line","d","highlightedEvents","map","slice","svg","select","id"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\n\nfunction getScale(width, height, dataRun) {\n  let minValue = Number.MAX_SAFE_INTEGER;\n  let maxValue = Number.MIN_SAFE_INTEGER;\n  const { timeSeries } = dataRun;\n  const timeSeriesMin = timeSeries[0][0];\n  const timeSeriesMax = timeSeries[timeSeries.length - 1][0];\n  const x = d3.scaleTime().range([0, width]);\n  const y = d3.scaleLinear().range([height, 0]);\n\n  minValue = minValue > timeSeriesMin ? timeSeriesMin : minValue;\n  maxValue = maxValue < timeSeriesMax ? timeSeriesMax : maxValue;\n  x.domain([minValue, maxValue]);\n  y.domain([-1, 1]);\n\n  return { x, y };\n}\n\nfunction drawBrush(element, width, onPeriodTimeChange, selectedPeriod) {\n  width -= 25;\n  const brushHeight = 43;\n  const xRange = d3.scaleTime().range([0, width]);\n  const brush = d3.brushX().extent([[0, 0], [width, brushHeight]]);\n  const brushContext = element.append('g').attr('class', 'brushContext');\n  brushContext\n    .append('g')\n    .attr('class', 'brush')\n    .attr('transform', 'translate(5, 3)')\n    .call(brush)\n    .call(brush.move, xRange.range());\n\n  const onBrushChange = () => {\n    if (d3.event.sourceEvent && d3.event.sourceEvent.type === 'zoom') return;\n    onPeriodTimeChange(d3.event.selection);\n  };\n  brush.on('brush end', onBrushChange);\n}\n\nexport function updateChart(selectedPeriod) {\n  const xRange = d3.scaleTime().range([0, 500]);\n\n  const brushContext = d3.selectAll('.brush');\n  const brush = d3.brushX().extent([[0, 0], [500, 40]]);\n  debugger;\n  // brushContext\n  //   .call(brush)\n  //   .call(brush.move, xRange.range());\n  // console.log(selectedPeriod);\n}\n\nexport function drawChart(width, height, dataRun, onPeriodTimeChange, selectedPeriod) {\n  const chartWidth = width - 35;\n  const { timeSeries, eventWindows } = dataRun;\n  const { x, y } = getScale(chartWidth, height, dataRun);\n  const line = d3\n    .line()\n    .x(d => x(d[0]))\n    .y(d => y(d[1]));\n\n  const highlightedEvents = eventWindows.map(event => timeSeries.slice(event[0], event[1] + 2));\n  const svg = d3\n    .select(`._${dataRun.id}`)\n    .append('svg')\n    .attr('width', chartWidth)\n    .attr('class', 'wave-chart');\n\n  svg\n    .append('path')\n    .attr('class', 'wave-data')\n    .attr('d', line(timeSeries))\n    .attr('transform', 'translate(10, 6)');\n\n  highlightedEvents.map(event =>\n    svg\n      .append('path')\n      .attr('class', 'wave-event')\n      .attr('transform', 'translate(10, 6)')\n      .attr('d', line(event)),\n  );\n  drawBrush(svg, width, onPeriodTimeChange, selectedPeriod);\n}\n"]},"metadata":{},"sourceType":"module"}