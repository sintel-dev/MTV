{"ast":null,"code":"var _jsxFileName = \"/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/Experiment.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './Overview.scss';\nimport { fetchExperiment } from '../../../model/actions/experiment';\nimport { getSelectedExperimentData, getProcessedDataRun } from '../../../model/selectors/experiment';\nimport Loader from '../../Common/Loader';\nimport DrawChart from './DrawChart';\n\nconst renderDatarun = (datarun, key) => React.createElement(\"div\", {\n  key: key,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}, React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  },\n  __self: this\n}, datarun.signal), React.createElement(DrawChart, {\n  dataRun: datarun.timeSeries,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}));\n\nfunction Experiment({\n  experimentData,\n  processedDatarun\n}) {\n  return React.createElement(\"div\", {\n    className: \"overview-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(Loader, {\n    isLoading: experimentData.isExperimentDataLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, !experimentData.isExperimentDataLoading && experimentData.data.dataruns.length ? experimentData.data.dataruns.map((datarun, key) => renderDatarun(processedDatarun, key)) : React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"soon\")));\n}\n\nExperiment.propTypes = {\n  experimentData: PropTypes.object,\n  processedDatarun: PropTypes.array\n};\nexport default connect(state => ({\n  experimentData: getSelectedExperimentData(state),\n  processedDatarun: getProcessedDataRun(state)\n}), dispatch => ({\n  fetchExperimentData: () => dispatch(fetchExperiment())\n}))(Experiment);","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/Experiment.jsx"],"names":["React","connect","PropTypes","fetchExperiment","getSelectedExperimentData","getProcessedDataRun","Loader","DrawChart","renderDatarun","datarun","key","signal","timeSeries","Experiment","experimentData","processedDatarun","isExperimentDataLoading","data","dataruns","length","map","propTypes","object","array","state","dispatch","fetchExperimentData"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,iBAAP;AAEA,SAASC,eAAT,QAAgC,mCAAhC;AACA,SAASC,yBAAT,EAAoCC,mBAApC,QAA+D,qCAA/D;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAGA,MAAMC,aAAa,GAAG,CAACC,OAAD,EAAUC,GAAV,KACpB;AAAK,EAAA,GAAG,EAAEA,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAOD,OAAO,CAACE,MAAf,CADF,EAEE,oBAAC,SAAD;AAAW,EAAA,OAAO,EAAEF,OAAO,CAACG,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFF,CADF;;AAMA,SAASC,UAAT,CAAoB;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA;AAAlB,CAApB,EAA0D;AACtD,SACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAED,cAAc,CAACE,uBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGI,CAACF,cAAc,CAACE,uBAAhB,IAA2CF,cAAc,CAACG,IAAf,CAAoBC,QAApB,CAA6BC,MAAxE,GACCL,cAAc,CAACG,IAAf,CAAoBC,QAApB,CAA6BE,GAA7B,CAAiC,CAACX,OAAD,EAAUC,GAAV,KAAkBF,aAAa,CAACO,gBAAD,EAAmBL,GAAnB,CAAhE,CADD,GAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALL,CAFF,CADF;AAaH;;AAEDG,UAAU,CAACQ,SAAX,GAAuB;AACnBP,EAAAA,cAAc,EAAEZ,SAAS,CAACoB,MADP;AAEnBP,EAAAA,gBAAgB,EAAEb,SAAS,CAACqB;AAFT,CAAvB;AAKA,eAAetB,OAAO,CAACuB,KAAK,KAAK;AAC7BV,EAAAA,cAAc,EAAEV,yBAAyB,CAACoB,KAAD,CADZ;AAE7BT,EAAAA,gBAAgB,EAAEV,mBAAmB,CAACmB,KAAD;AAFR,CAAL,CAAN,EAGlBC,QAAQ,KAAK;AACbC,EAAAA,mBAAmB,EAAE,MAAMD,QAAQ,CAACtB,eAAe,EAAhB;AADtB,CAAL,CAHU,CAAP,CAKXU,UALW,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './Overview.scss';\n\nimport { fetchExperiment } from '../../../model/actions/experiment';\nimport { getSelectedExperimentData, getProcessedDataRun } from '../../../model/selectors/experiment';\nimport Loader from '../../Common/Loader';\nimport DrawChart from './DrawChart';\n\n\nconst renderDatarun = (datarun, key) => (\n  <div key={key}>\n    <span>{datarun.signal}</span>\n    <DrawChart dataRun={datarun.timeSeries} />\n  </div>);\n\nfunction Experiment({ experimentData, processedDatarun }) {\n    return (\n      <div className=\"overview-wrapper\">\n\n        <Loader isLoading={experimentData.isExperimentDataLoading}>\n\n          {\n            !experimentData.isExperimentDataLoading && experimentData.data.dataruns.length ?\n             experimentData.data.dataruns.map((datarun, key) => renderDatarun(processedDatarun, key)) :\n             <p>soon</p>\n          }\n        </Loader>\n      </div>\n    );\n}\n\nExperiment.propTypes = {\n    experimentData: PropTypes.object,\n    processedDatarun: PropTypes.array,\n};\n\nexport default connect(state => ({\n    experimentData: getSelectedExperimentData(state),\n    processedDatarun: getProcessedDataRun(state),\n}), dispatch => ({\n    fetchExperimentData: () => dispatch(fetchExperiment()),\n}))(Experiment);\n"]},"metadata":{},"sourceType":"module"}