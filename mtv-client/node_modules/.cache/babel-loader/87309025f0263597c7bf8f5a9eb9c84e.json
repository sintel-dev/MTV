{"ast":null,"code":"import _defineProperty from \"/home/sergiu/Projects/mtv-react/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSelector } from 'reselect';\nexport const getExperimentsData = state => state.experiments;\nexport const getPipelinesData = state => state.pipelines;\nexport const getDatasets = state => state.datasets;\nexport const getSelectedPipeline = state => state.pipelines.pipelineName;\nexport const getActiveProjectName = state => state.projects.selectedProject;\n\nconst addPipelines = (projectStack, pipelines) => projectStack.map(project => _objectSpread({}, project, {\n  pipelines\n}));\n\nconst isProjectsLoading = createSelector([getExperimentsData, getPipelinesData, getDatasets], (experimentsData, pipelinesData, datasets) => experimentsData.ieExperimentsLoading || datasets.isDatasetLoading || pipelinesData.isPipelinesLoading);\n\nconst groupExperimentsByProj = (stack, criteria) => {\n  const grouppedProjects = [];\n  const grouppedStack = stack.reduce((result, currentValue) => {\n    (result[currentValue[criteria]] = result[currentValue[criteria]] || []).push(currentValue);\n    return result;\n  }, []);\n  Object.keys(grouppedStack).forEach(expGroup => {\n    grouppedProjects.push({\n      experimentNum: grouppedStack[expGroup].length,\n      experiments: grouppedStack[expGroup],\n      name: expGroup,\n      // uniquePipelineNum: countPipelines(expGroup),\n      signalNum: function () {\n        switch (expGroup) {\n          case 'SMAP':\n            return 55;\n\n          case 'MSL':\n            return 27;\n\n          default:\n            // For SES\n            return 71;\n        }\n      }()\n    });\n  });\n  return grouppedProjects;\n};\n\nexport const getFilteredExperiments = createSelector([getExperimentsData, getSelectedPipeline], (experimentsData, selectedPipeline) => experimentsData.experimentsList.filter(experiment => !selectedPipeline || experiment.pipeline === selectedPipeline));\nconst getProjectsList = createSelector([isProjectsLoading, getExperimentsData, getDatasets, getPipelinesData, getActiveProjectName], (isLoadingProjects, experimentsData, dataSets, pipelinesData, activeProjectName) => {\n  if (isLoadingProjects) {\n    return [];\n  }\n\n  let projectData = {};\n  const grouppedExpByProject = groupExperimentsByProj(experimentsData.experimentsList, 'project');\n  const pipelinedProjects = addPipelines(grouppedExpByProject, pipelinesData.pipelineList);\n  const activeProject = activeProjectName || pipelinedProjects[0].name;\n  const projects = pipelinedProjects.map(project => _objectSpread({}, project, {\n    isActive: project.name === activeProject\n  }));\n  projectData = {\n    isProjectsLoading: isLoadingProjects,\n    projects\n  };\n  return projectData;\n});\nexport const getProjectsData = createSelector([isProjectsLoading, getProjectsList], (isLoadingProjects, projectsList) => {\n  let projectData = {\n    isProjectsLoading: isLoadingProjects,\n    projectsList\n  };\n  return projectData;\n});\nexport const getActiveProjExperiments = createSelector([getProjectsList], projectsList => {\n  const projects = projectsList.projects;\n  const activeProjectExperiments = projects.filter(project => project.isActive);\n  return activeProjectExperiments; // projects.map(project => console.log(project));\n}); // export const getFilteredExperiments = createSelector(\n//     [getProjectsData, getSelectedPipeline, getActiveProjExperiments],\n//     (projectsData, selectedPipeline, expByProj) => {\n//         if (!projectsData.isProjectsLoading) {\n//             console.log(expByProj);\n//         // if (isProjectsLoading) { return; }\n//         // const activeProject = projectsData.projectsList.projects.forEach(project => project.isActive && project);\n//         const activeProjectExperiments = projectsData.projectsList.projects.filter(project => project.isActive && project);\n//         const experimentsList = activeProjectExperiments[0].experiments.filter(experiment => !selectedPipeline || experiment.pipeline === selectedPipeline);\n//         return experimentsList;\n//         }\n//         return null;\n//         // const experimentsList = experimentsData.experimentsList.filter(experiment => !selectedPipeline || experiment.pipeline === selectedPipeline);\n//         // return { experimentsList, isExperimentsLoading };\n//     });\n// export const getActiveProject = createSelector(\n//     [getProjectsList],\n//     (projectsList) => {\n//         console.log(projectsList);\n//     },\n// );","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/model/selectors/projects.js"],"names":["createSelector","getExperimentsData","state","experiments","getPipelinesData","pipelines","getDatasets","datasets","getSelectedPipeline","pipelineName","getActiveProjectName","projects","selectedProject","addPipelines","projectStack","map","project","isProjectsLoading","experimentsData","pipelinesData","ieExperimentsLoading","isDatasetLoading","isPipelinesLoading","groupExperimentsByProj","stack","criteria","grouppedProjects","grouppedStack","reduce","result","currentValue","push","Object","keys","forEach","expGroup","experimentNum","length","name","signalNum","getFilteredExperiments","selectedPipeline","experimentsList","filter","experiment","pipeline","getProjectsList","isLoadingProjects","dataSets","activeProjectName","projectData","grouppedExpByProject","pipelinedProjects","pipelineList","activeProject","isActive","getProjectsData","projectsList","getActiveProjExperiments","activeProjectExperiments"],"mappings":"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","sourcesContent":["import { createSelector } from 'reselect';\n\nexport const getExperimentsData = (state) => state.experiments;\nexport const getPipelinesData = (state) => state.pipelines;\nexport const getDatasets = (state) => state.datasets;\nexport const getSelectedPipeline = (state) => state.pipelines.pipelineName;\nexport const getActiveProjectName = (state) => state.projects.selectedProject;\n\nconst addPipelines = (projectStack, pipelines) => projectStack.map(project => ({ ...project, pipelines }));\n\nconst isProjectsLoading = createSelector(\n    [getExperimentsData, getPipelinesData, getDatasets],\n    (experimentsData, pipelinesData, datasets) =>\n        experimentsData.ieExperimentsLoading || datasets.isDatasetLoading || pipelinesData.isPipelinesLoading);\n\nconst groupExperimentsByProj = (stack, criteria) => {\n    const grouppedProjects = [];\n    const grouppedStack = stack.reduce((result, currentValue) => {\n        (result[currentValue[criteria]] = result[currentValue[criteria]] || []).push(currentValue);\n        return result;\n    }, []);\n\n    Object.keys(grouppedStack).forEach(expGroup => {\n        grouppedProjects.push({\n            experimentNum: grouppedStack[expGroup].length,\n            experiments: grouppedStack[expGroup],\n            name: expGroup,\n            // uniquePipelineNum: countPipelines(expGroup),\n            signalNum: (function() {\n                switch (expGroup) {\n                    case 'SMAP': return 55;\n                    case 'MSL': return 27;\n                    default: // For SES\n                        return 71;\n                }\n            }()),\n        });\n    });\n\n    return grouppedProjects;\n};\n\nexport const getFilteredExperiments = createSelector(\n    [getExperimentsData, getSelectedPipeline],\n    (experimentsData, selectedPipeline) =>\n        experimentsData.experimentsList.filter(experiment => !selectedPipeline || experiment.pipeline === selectedPipeline));\n\n\nconst getProjectsList = createSelector(\n    [isProjectsLoading, getExperimentsData, getDatasets, getPipelinesData, getActiveProjectName],\n    (isLoadingProjects, experimentsData, dataSets, pipelinesData, activeProjectName) => {\n        if (isLoadingProjects) { return []; }\n\n        let projectData = {};\n        const grouppedExpByProject = groupExperimentsByProj(experimentsData.experimentsList, 'project');\n        const pipelinedProjects = addPipelines(grouppedExpByProject, pipelinesData.pipelineList);\n        const activeProject = activeProjectName || pipelinedProjects[0].name;\n        const projects = pipelinedProjects.map(project => ({ ...project, isActive: project.name === activeProject }));\n\n        projectData = {\n            isProjectsLoading: isLoadingProjects,\n            projects,\n        };\n\n        return projectData;\n    },\n);\n\nexport const getProjectsData = createSelector(\n    [isProjectsLoading, getProjectsList],\n    (isLoadingProjects, projectsList) => {\n        let projectData = {\n            isProjectsLoading: isLoadingProjects,\n            projectsList,\n        };\n        return projectData;\n    },\n);\n\nexport const getActiveProjExperiments = createSelector(\n    [getProjectsList],\n    (projectsList) => {\n        const { projects } = projectsList;\n        const activeProjectExperiments = projects.filter(project => project.isActive);\n        return activeProjectExperiments;\n\n        // projects.map(project => console.log(project));\n    },\n);\n\n// export const getFilteredExperiments = createSelector(\n//     [getProjectsData, getSelectedPipeline, getActiveProjExperiments],\n//     (projectsData, selectedPipeline, expByProj) => {\n//         if (!projectsData.isProjectsLoading) {\n//             console.log(expByProj);\n//         // if (isProjectsLoading) { return; }\n\n//         // const activeProject = projectsData.projectsList.projects.forEach(project => project.isActive && project);\n//         const activeProjectExperiments = projectsData.projectsList.projects.filter(project => project.isActive && project);\n//         const experimentsList = activeProjectExperiments[0].experiments.filter(experiment => !selectedPipeline || experiment.pipeline === selectedPipeline);\n\n//         return experimentsList;\n//         }\n//         return null;\n//         // const experimentsList = experimentsData.experimentsList.filter(experiment => !selectedPipeline || experiment.pipeline === selectedPipeline);\n//         // return { experimentsList, isExperimentsLoading };\n//     });\n\n// export const getActiveProject = createSelector(\n//     [getProjectsList],\n//     (projectsList) => {\n//         console.log(projectsList);\n//     },\n// );\n"]},"metadata":{},"sourceType":"module"}