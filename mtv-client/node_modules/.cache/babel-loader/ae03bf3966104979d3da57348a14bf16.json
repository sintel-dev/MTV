{"ast":null,"code":"var _jsxFileName = \"/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/DrawChart.jsx\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport * as data from './tmpData';\nconst svgData = data.svgData;\n\nclass DrawChart extends Component {\n  componentDidMount() {\n    this.svgRoot = React.createRef();\n    this.drawChart();\n  }\n\n  getScale(w, h) {\n    let mmin = Number.MAX_SAFE_INTEGER;\n    let mmax = Number.MIN_SAFE_INTEGER;\n    svgData.map(drawData => {\n      let first = drawData[0][0];\n      let last = drawData[svgData.length - 1][0];\n      console.log(first, last); // mmin = mmin < data\n    });\n    const x = d3.scaleTime().range([0, w]);\n    x.domain([1222819200000, 1468864800000]);\n    const y = d3.scaleLinear().range([h, 0]);\n    y.domain([-1, 1]); // debugger;\n\n    return {\n      x,\n      y\n    };\n  }\n\n  drawChart() {\n    const stroke = 'rgb(36, 116, 241, 0.7)';\n    const strokeWidth = 1;\n    const w = 300;\n    const h = 300;\n\n    const _this$getScale = this.getScale(900, 300),\n          x = _this$getScale.x,\n          y = _this$getScale.y;\n\n    const line = d3.line().x(d => x(d[0])).y(d => y(d[1]));\n    const svg = d3.select('.single-chart').append('svg').attr('width', w).attr('height', h);\n    svg.append('path').attr('stroke', stroke).attr('stroke-width', strokeWidth).attr('class', 'line-data').attr('d', line(svgData)); // svg.append('path').attr('class', 'line-highlight');\n    // svg.select('.line-data')\n    // .enter()\n    // .append('d', line(svgData));\n    // svgData.map((pathData, index) => {\n    //     console.log(pathData[0], pathData[1]);\n    //     return pathData;\n    // });\n    // ;\n    // svg.selectAll('rect')\n    //   .data(data)\n    //   .enter()\n    //   .append('rect')\n    //   .attr('x', (d, i) => i * 70)\n    //   .attr('y', (d, i) => h - 10 * d)\n    //   .attr('width', 65)\n    //   .attr('height', (d, i) => d * 10)\n    //   .attr('fill', 'green');\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"single-chart\",\n      ref: this.svgRoot,\n      style: {\n        height: '100%',\n        width: '500px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Chart planning here\"));\n  }\n\n}\n\nexport default DrawChart;","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/DrawChart.jsx"],"names":["React","Component","d3","data","svgData","DrawChart","componentDidMount","svgRoot","createRef","drawChart","getScale","w","h","mmin","Number","MAX_SAFE_INTEGER","mmax","MIN_SAFE_INTEGER","map","drawData","first","last","length","console","log","x","scaleTime","range","domain","y","scaleLinear","stroke","strokeWidth","line","d","svg","select","append","attr","render","height","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport * as data from './tmpData';\n\nconst { svgData } = data;\n\nclass DrawChart extends Component {\n    componentDidMount() {\n        this.svgRoot = React.createRef();\n        this.drawChart();\n    }\n\n    getScale(w, h) {\n      let mmin = Number.MAX_SAFE_INTEGER;\n      let mmax = Number.MIN_SAFE_INTEGER;\n\n      svgData.map(drawData => {\n        let first = drawData[0][0];\n        let last = drawData[svgData.length - 1][0];\n        console.log(first, last);\n        // mmin = mmin < data\n      });\n\n      const x = d3.scaleTime().range([0, w]);\n      x.domain([1222819200000, 1468864800000]);\n\n      const y = d3.scaleLinear().range([h, 0]);\n      y.domain([-1, 1]);\n      // debugger;\n      return { x, y };\n    }\n\n    drawChart() {\n      const stroke = 'rgb(36, 116, 241, 0.7)';\n      const strokeWidth = 1;\n\n\n      const w = 300;\n      const h = 300;\n      const { x, y } = this.getScale(900, 300);\n      const line = d3.line()\n        .x(d => x(d[0]))\n        .y(d => y(d[1]));\n\n      const svg = d3.select('.single-chart')\n        .append('svg')\n        .attr('width', w)\n        .attr('height', h);\n\n      svg.append('path')\n        .attr('stroke', stroke)\n        .attr('stroke-width', strokeWidth)\n        .attr('class', 'line-data')\n        .attr('d', line(svgData));\n\n      // svg.append('path').attr('class', 'line-highlight');\n\n\n      // svg.select('.line-data')\n      // .enter()\n      // .append('d', line(svgData));\n\n      // svgData.map((pathData, index) => {\n\n      //     console.log(pathData[0], pathData[1]);\n      //     return pathData;\n      // });\n      // ;\n\n\n      // svg.selectAll('rect')\n      //   .data(data)\n      //   .enter()\n      //   .append('rect')\n      //   .attr('x', (d, i) => i * 70)\n      //   .attr('y', (d, i) => h - 10 * d)\n      //   .attr('width', 65)\n      //   .attr('height', (d, i) => d * 10)\n      //   .attr('fill', 'green');\n    }\n\n    render() {\n        return (\n          <div>\n\n            <div className=\"single-chart\" ref={this.svgRoot} style={{ height: '100%', width: '500px' }}>Chart planning here</div>\n          </div>\n        );\n    }\n}\n\nexport default DrawChart;\n"]},"metadata":{},"sourceType":"module"}