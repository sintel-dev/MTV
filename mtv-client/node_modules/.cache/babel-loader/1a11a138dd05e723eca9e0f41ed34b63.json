{"ast":null,"code":"import * as d3 from 'd3';\nlet periodRange = 0;\nlet brush = null;\nlet brushContext = null;\n\nfunction getScale(width, height, dataRun) {\n  let minValue = Number.MAX_SAFE_INTEGER;\n  let maxValue = Number.MIN_SAFE_INTEGER;\n  const timeSeries = dataRun.timeSeries;\n  const timeSeriesMin = timeSeries[0][0];\n  const timeSeriesMax = timeSeries[timeSeries.length - 1][0];\n  const x = d3.scaleTime().range([0, width]);\n  const y = d3.scaleLinear().range([height, 0]);\n  minValue = minValue > timeSeriesMin ? timeSeriesMin : minValue;\n  maxValue = maxValue < timeSeriesMax ? timeSeriesMax : maxValue;\n  x.domain([minValue, maxValue]);\n  y.domain([-1, 1]);\n  return {\n    x,\n    y\n  };\n}\n\nexport function drawBrush(element, width, onPeriodTimeChange) {\n  width -= 25;\n  const brushHeight = 43;\n  const xRange = d3.scaleTime().range([0, width]);\n  brush = d3.brushX().extent([[0, 0], [width, brushHeight]]);\n  brushContext = element.append('g').attr('class', 'brushContext');\n  brushContext.append('g').attr('class', 'brush').attr('transform', 'translate(5, 3)').call(brush).call(brush.move, xRange.range()).on('brush end', null);\n  brush.on('brush end', () => {\n    updateBrushPeriod(d3.event.selection);\n    brush.on('brush end', null); // onPeriodTimeChange(d3.event.selection);\n    // brush.on('brush end', null);\n    // d3.select('.brush').call(brush.move, d3.event.selection);\n    // d3.select('#chart_5da80105abc56689357439e6').call(brush).call(brush.move, d3.event.selection);\n    // onPeriodTimeChange(d3.event.selection);\n    // periodRange = d3.event.selection;\n    // return periodRange;\n    // updateBrushPeriod(d3.event.selection);\n    // brushContext.call(brush.move, d3.event.selection);\n    // brushContext.nodes().map(node =>\n    //   d3.select(node)\n    //     .call(brush.move, eventRange)\n    //     .on('brush end', null),\n    // );\n  }); // const updateBrushPeriod = (periodRange) => {\n  //   console.log(periodRange);\n  // };\n  // const updateEventRange = function() {\n  //   if (d3.event.sourceEvent && d3.event.sourceEvent.type === 'zoom') return;\n  //   onPeriodTimeChange(d3.event.selection);\n  // console.log(range);\n  // brushContext.nodes().map(node =>\n  //   d3.select(node)\n  //     .call(brush.move, [0, 700])\n  //     .on('brush end', null),\n  // );\n  // brushContext\n  // .call(brush)\n  // .call(brush.move, [0, 700])\n  // .on('brush end', null);\n  // eventRange = d3.event.selection;\n  // onPeriodTimeChange(d3.event.selection);\n  // };\n  // brush.on('brush end', updateBrush);\n  // const onBrushChange = () => {\n  // if (d3.event.sourceEvent && d3.event.sourceEvent.type === 'zoom') return;\n  // updateChart([0, 500]);\n  // onPeriodTimeChange(d3.event.selection);\n  // };\n  // brush.on('brush end', updateBrush);\n}\nexport function updateBrushPeriod(eventRange) {\n  console.log(eventRange); // const xRange = d3.scaleTime().range(eventRange);\n  // const brush = d3.brushX().extent([[0, 0], eventRange]);\n\n  brush.on('brush end', null);\n  const existingBrushes = d3.selectAll('.brush');\n  console.log(existingBrushes);\n  d3.selectAll('.brush').groups.each(element => {\n    console.log(element);\n    debugger;\n  }); // existingBrushes\n  //   .call(brush.move, eventRange);\n  // brush.on('brush end', null);\n  // debugger;\n  // brushContext;\n  // .call(brush)\n  // .call(brush.move, eventRange);\n  // .on('brush end', null);\n  // brushContext.nodes().map(node =>\n  //   d3.select(node)\n  //     .call(brush.move, eventRange)\n  //     .on('brush end', null),\n  // );\n  // brush.on('brush end', null);\n  // brushContext\n  //   .call(brush)\n  //   .call(brush.move, xRange.range());\n  // console.log(selectedPeriod);\n}\nexport function drawChart(width, height, dataRun, onPeriodTimeChange, selectedPeriod, chartID) {\n  const chartWidth = width - 35;\n  const timeSeries = dataRun.timeSeries,\n        eventWindows = dataRun.eventWindows;\n\n  const _getScale = getScale(chartWidth, height, dataRun),\n        x = _getScale.x,\n        y = _getScale.y;\n\n  const line = d3.line().x(d => x(d[0])).y(d => y(d[1]));\n  const highlightedEvents = eventWindows.map(event => timeSeries.slice(event[0], event[1] + 2));\n  const svg = d3.select(\"._\".concat(dataRun.id)).append('svg').attr('width', chartWidth).attr('class', 'wave-chart');\n  svg.append('path').attr('class', 'wave-data').attr('d', line(timeSeries)).attr('transform', 'translate(10, 6)');\n  highlightedEvents.map(event => svg.append('path').attr('class', 'wave-event').attr('transform', 'translate(10, 6)').attr('d', line(event)));\n  drawBrush(svg, width, onPeriodTimeChange, chartID);\n}","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/chartUtils.js"],"names":["d3","periodRange","brush","brushContext","getScale","width","height","dataRun","minValue","Number","MAX_SAFE_INTEGER","maxValue","MIN_SAFE_INTEGER","timeSeries","timeSeriesMin","timeSeriesMax","length","x","scaleTime","range","y","scaleLinear","domain","drawBrush","element","onPeriodTimeChange","brushHeight","xRange","brushX","extent","append","attr","call","move","on","updateBrushPeriod","event","selection","eventRange","console","log","existingBrushes","selectAll","groups","each","drawChart","selectedPeriod","chartID","chartWidth","eventWindows","line","d","highlightedEvents","map","slice","svg","select","id"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\n\nlet periodRange = 0;\nlet brush = null;\nlet brushContext = null;\nfunction getScale(width, height, dataRun) {\n  let minValue = Number.MAX_SAFE_INTEGER;\n  let maxValue = Number.MIN_SAFE_INTEGER;\n  const { timeSeries } = dataRun;\n  const timeSeriesMin = timeSeries[0][0];\n  const timeSeriesMax = timeSeries[timeSeries.length - 1][0];\n  const x = d3.scaleTime().range([0, width]);\n  const y = d3.scaleLinear().range([height, 0]);\n\n  minValue = minValue > timeSeriesMin ? timeSeriesMin : minValue;\n  maxValue = maxValue < timeSeriesMax ? timeSeriesMax : maxValue;\n  x.domain([minValue, maxValue]);\n  y.domain([-1, 1]);\n\n  return { x, y };\n}\n\nexport function drawBrush(element, width, onPeriodTimeChange) {\n  width -= 25;\n  const brushHeight = 43;\n  const xRange = d3.scaleTime().range([0, width]);\n  brush = d3.brushX().extent([[0, 0], [width, brushHeight]]);\n  brushContext = element.append('g').attr('class', 'brushContext');\n\n  brushContext\n    .append('g')\n    .attr('class', 'brush')\n    .attr('transform', 'translate(5, 3)')\n    .call(brush)\n    .call(brush.move, xRange.range())\n    .on('brush end', null);\n\n\n  brush.on('brush end', () => {\n    updateBrushPeriod(d3.event.selection);\n    brush.on('brush end', null);\n    // onPeriodTimeChange(d3.event.selection);\n\n\n    // brush.on('brush end', null);\n    // d3.select('.brush').call(brush.move, d3.event.selection);\n    // d3.select('#chart_5da80105abc56689357439e6').call(brush).call(brush.move, d3.event.selection);\n\n    // onPeriodTimeChange(d3.event.selection);\n\n    // periodRange = d3.event.selection;\n    // return periodRange;\n\n    // updateBrushPeriod(d3.event.selection);\n    // brushContext.call(brush.move, d3.event.selection);\n    // brushContext.nodes().map(node =>\n  //   d3.select(node)\n  //     .call(brush.move, eventRange)\n  //     .on('brush end', null),\n  // );\n  });\n\n  // const updateBrushPeriod = (periodRange) => {\n  //   console.log(periodRange);\n  // };\n\n  // const updateEventRange = function() {\n  //   if (d3.event.sourceEvent && d3.event.sourceEvent.type === 'zoom') return;\n  //   onPeriodTimeChange(d3.event.selection);\n    // console.log(range);\n\n\n    // brushContext.nodes().map(node =>\n    //   d3.select(node)\n    //     .call(brush.move, [0, 700])\n    //     .on('brush end', null),\n    // );\n\n    // brushContext\n    // .call(brush)\n    // .call(brush.move, [0, 700])\n    // .on('brush end', null);\n    // eventRange = d3.event.selection;\n    // onPeriodTimeChange(d3.event.selection);\n  // };\n\n\n  // brush.on('brush end', updateBrush);\n\n  // const onBrushChange = () => {\n    // if (d3.event.sourceEvent && d3.event.sourceEvent.type === 'zoom') return;\n    // updateChart([0, 500]);\n    // onPeriodTimeChange(d3.event.selection);\n  // };\n  // brush.on('brush end', updateBrush);\n}\n\nexport function updateBrushPeriod(eventRange) {\n  console.log(eventRange);\n  // const xRange = d3.scaleTime().range(eventRange);\n  // const brush = d3.brushX().extent([[0, 0], eventRange]);\n  brush.on('brush end', null);\n  const existingBrushes = d3.selectAll('.brush');\n  console.log(existingBrushes);\n\n  d3.selectAll('.brush').groups.each(element => {\n    console.log(element);\n    debugger;\n  });\n\n  // existingBrushes\n  //   .call(brush.move, eventRange);\n  // brush.on('brush end', null);\n\n\n  // debugger;\n  // brushContext;\n    // .call(brush)\n    // .call(brush.move, eventRange);\n    // .on('brush end', null);\n  // brushContext.nodes().map(node =>\n  //   d3.select(node)\n  //     .call(brush.move, eventRange)\n  //     .on('brush end', null),\n  // );\n  // brush.on('brush end', null);\n\n  // brushContext\n  //   .call(brush)\n  //   .call(brush.move, xRange.range());\n  // console.log(selectedPeriod);\n}\n\nexport function drawChart(width, height, dataRun, onPeriodTimeChange, selectedPeriod, chartID) {\n  const chartWidth = width - 35;\n  const { timeSeries, eventWindows } = dataRun;\n  const { x, y } = getScale(chartWidth, height, dataRun);\n  const line = d3\n    .line()\n    .x(d => x(d[0]))\n    .y(d => y(d[1]));\n\n  const highlightedEvents = eventWindows.map(event => timeSeries.slice(event[0], event[1] + 2));\n  const svg = d3\n    .select(`._${dataRun.id}`)\n    .append('svg')\n    .attr('width', chartWidth)\n    .attr('class', 'wave-chart');\n\n  svg\n    .append('path')\n    .attr('class', 'wave-data')\n    .attr('d', line(timeSeries))\n    .attr('transform', 'translate(10, 6)');\n\n  highlightedEvents.map(event =>\n    svg\n      .append('path')\n      .attr('class', 'wave-event')\n      .attr('transform', 'translate(10, 6)')\n      .attr('d', line(event)),\n  );\n\n  drawBrush(svg, width, onPeriodTimeChange, chartID);\n}\n"]},"metadata":{},"sourceType":"module"}