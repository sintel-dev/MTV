{"ast":null,"code":"var _jsxFileName = \"/home/sergiu/Projects/mtv-react/src/components/Landing/Projects.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Loader from '../Common/Loader';\nimport { getProjectsData } from '../../model/selectors/projects';\nimport { selectProject } from '../../model/actions/landing';\n\nconst setActiveProject = (onSelectProject, project) => {\n  onSelectProject(project);\n};\n\nconst renderProject = (project, index, onSelectProject) => {\n  const activeClass = project.isActive ? 'active' : '';\n  return React.createElement(\"div\", {\n    className: \"cell \".concat(activeClass),\n    key: index,\n    onClick: () => setActiveProject(onSelectProject, project),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, project.name), React.createElement(\"div\", {\n    className: \"item-data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, project.signalNum, \" Signals\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, project.pipelines.length, \" unique pipelines\")), React.createElement(\"ul\", {\n    className: \"last\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, project.experimentNum, \" experiments\"))));\n};\n\nconst Projects = props => {\n  const _props$projectsData = props.projectsData,\n        isProjectsLoading = _props$projectsData.isProjectsLoading,\n        projectsList = _props$projectsData.projectsList;\n  const onSelectProject = props.onSelectProject; // console.log(props);\n\n  return React.createElement(\"div\", {\n    className: \"item-row scroll-style\",\n    id: \"projects\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Datasets\"), React.createElement(\"div\", {\n    className: \"item-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }));\n};\n\nProjects.propTypes = {\n  projectsData: PropTypes.object,\n  onSelectProject: PropTypes.func\n};\nexport default connect(state => ({\n  projectsData: getProjectsData(state)\n}), dispatch => ({\n  onSelectProject: project => dispatch(selectProject(project))\n}))(Projects);","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Landing/Projects.jsx"],"names":["React","PropTypes","connect","Loader","getProjectsData","selectProject","setActiveProject","onSelectProject","project","renderProject","index","activeClass","isActive","name","signalNum","pipelines","length","experimentNum","Projects","props","projectsData","isProjectsLoading","projectsList","propTypes","object","func","state","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,aAAT,QAA8B,6BAA9B;;AAEA,MAAMC,gBAAgB,GAAG,CAACC,eAAD,EAAkBC,OAAlB,KAA8B;AACrDD,EAAAA,eAAe,CAACC,OAAD,CAAf;AACD,CAFD;;AAIA,MAAMC,aAAa,GAAG,CAACD,OAAD,EAAUE,KAAV,EAAiBH,eAAjB,KAAqC;AACzD,QAAMI,WAAW,GAAGH,OAAO,CAACI,QAAR,GAAmB,QAAnB,GAA8B,EAAlD;AACA,SACE;AAAK,IAAA,SAAS,iBAAUD,WAAV,CAAd;AAAuC,IAAA,GAAG,EAAED,KAA5C;AAAmD,IAAA,OAAO,EAAE,MAAMJ,gBAAgB,CAACC,eAAD,EAAkBC,OAAlB,CAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,OAAO,CAACK,IAAb,CADF,EAEE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKL,OAAO,CAACM,SAAb,aADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKN,OAAO,CAACO,SAAR,CAAkBC,MAAvB,sBAFF,CADF,EAKE;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKR,OAAO,CAACS,aAAb,iBADF,CALF,CAFF,CADF;AAcD,CAhBD;;AAkBA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA,8BACkBA,KAAK,CAACC,YADxB;AAAA,QAClBC,iBADkB,uBAClBA,iBADkB;AAAA,QACCC,YADD,uBACCA,YADD;AAAA,QAElBf,eAFkB,GAEEY,KAFF,CAElBZ,eAFkB,EAI1B;;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAuC,IAAA,EAAE,EAAC,UAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAaD,CAnBD;;AAqBAW,QAAQ,CAACK,SAAT,GAAqB;AACnBH,EAAAA,YAAY,EAAEnB,SAAS,CAACuB,MADL;AAEnBjB,EAAAA,eAAe,EAAEN,SAAS,CAACwB;AAFR,CAArB;AAKA,eAAevB,OAAO,CAACwB,KAAK,KAAK;AAC/BN,EAAAA,YAAY,EAAEhB,eAAe,CAACsB,KAAD;AADE,CAAL,CAAN,EAElBC,QAAQ,KAAK;AACfpB,EAAAA,eAAe,EAAGC,OAAD,IAAamB,QAAQ,CAACtB,aAAa,CAACG,OAAD,CAAd;AADvB,CAAL,CAFU,CAAP,CAIXU,QAJW,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Loader from '../Common/Loader';\nimport { getProjectsData } from '../../model/selectors/projects';\nimport { selectProject } from '../../model/actions/landing';\n\nconst setActiveProject = (onSelectProject, project) => {\n  onSelectProject(project);\n};\n\nconst renderProject = (project, index, onSelectProject) => {\n  const activeClass = project.isActive ? 'active' : '';\n  return (\n    <div className={`cell ${activeClass}`} key={index} onClick={() => setActiveProject(onSelectProject, project)}>\n      <h3>{project.name}</h3>\n      <div className=\"item-data\">\n        <ul>\n          <li>{project.signalNum} Signals</li>\n          <li>{project.pipelines.length} unique pipelines</li>\n        </ul>\n        <ul className=\"last\">\n          <li>{project.experimentNum} experiments</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nconst Projects = (props) => {\n  const { isProjectsLoading, projectsList } = props.projectsData;\n  const { onSelectProject } = props;\n\n  // console.log(props);\n\n  return (\n    <div className=\"item-row scroll-style\" id=\"projects\">\n      <h2>Datasets</h2>\n      <div className=\"item-wrapper\">\n        {/* <Loader isLoading={isProjectsLoading}>\n          {\n              projectsList.projects && projectsList.projects.length ?\n                projectsList.projects.map((project, index) => renderProject(project, index, onSelectProject)) :\n                <p>No datasets have been found</p>\n            }\n        </Loader> */}\n      </div>\n    </div>);\n};\n\nProjects.propTypes = {\n  projectsData: PropTypes.object,\n  onSelectProject: PropTypes.func,\n};\n\nexport default connect(state => ({\n  projectsData: getProjectsData(state),\n}), dispatch => ({\n  onSelectProject: (project) => dispatch(selectProject(project)),\n}))(Projects);\n"]},"metadata":{},"sourceType":"module"}