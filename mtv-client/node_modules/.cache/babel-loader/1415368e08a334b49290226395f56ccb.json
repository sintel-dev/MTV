{"ast":null,"code":"import { applyMiddleware, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createLogger } from 'redux-logger';\nimport rootReducer from '../reducers';\nimport { api } from './middlewares';\nexport function configureStore(initialState = {}) {\n  console.log(process.env.NODE_ENV);\n  const middlewares = [thunkMiddleware, api];\n\n  if (process.env.NODE_ENV !== 'test') {\n    middlewares.push(createLogger({\n      collapsed: true\n    }));\n  }\n\n  const composedEnhancers = composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(rootReducer, initialState, composedEnhancers);\n  return store;\n}\nexport default configureStore();","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/model/store/index.js"],"names":["applyMiddleware","createStore","thunkMiddleware","composeWithDevTools","createLogger","rootReducer","api","configureStore","initialState","console","log","process","env","NODE_ENV","middlewares","push","collapsed","composedEnhancers","store"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,YAAT,QAA6B,cAA7B;AAEA,OAAOC,WAAP,MAAwB,aAAxB;AACA,SAASC,GAAT,QAAoB,eAApB;AAEA,OAAO,SAASC,cAAT,CAAwBC,YAAY,GAAG,EAAvC,EAA2C;AAChDC,EAAAA,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAAR,CAAYC,QAAxB;AACA,QAAMC,WAAW,GAAG,CAACZ,eAAD,EAAkBI,GAAlB,CAApB;;AACA,MAAIK,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnCC,IAAAA,WAAW,CAACC,IAAZ,CAAiBX,YAAY,CAAC;AAC5BY,MAAAA,SAAS,EAAE;AADiB,KAAD,CAA7B;AAGD;;AACD,QAAMC,iBAAiB,GAAGd,mBAAmB,CAACH,eAAe,CAAC,GAAGc,WAAJ,CAAhB,CAA7C;AACA,QAAMI,KAAK,GAAGjB,WAAW,CAACI,WAAD,EAAcG,YAAd,EAA4BS,iBAA5B,CAAzB;AACA,SAAOC,KAAP;AACD;AAED,eAAeX,cAAc,EAA7B","sourcesContent":["import { applyMiddleware, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createLogger } from 'redux-logger';\n\nimport rootReducer from '../reducers';\nimport { api } from './middlewares';\n\nexport function configureStore(initialState = {}) {\n  console.log(process.env.NODE_ENV);\n  const middlewares = [thunkMiddleware, api];\n  if (process.env.NODE_ENV !== 'test') {\n    middlewares.push(createLogger({\n      collapsed: true,\n    }));\n  }\n  const composedEnhancers = composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(rootReducer, initialState, composedEnhancers);\n  return store;\n}\n\nexport default configureStore();\n"]},"metadata":{},"sourceType":"module"}