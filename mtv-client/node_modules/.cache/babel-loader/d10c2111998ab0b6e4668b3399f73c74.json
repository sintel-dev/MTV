{"ast":null,"code":"var _jsxFileName = \"/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/Datarun.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { selectDatarun } from '../../../model/actions/datarun';\nimport { getSelectedDatarunID } from '../../../model/selectors/datarun';\nimport DrawChart from './DrawChart';\n\nconst Datarun = ({\n  datarun,\n  isLoading,\n  onSelectDatarun,\n  selectedDatarunID\n}) => {\n  const activeClass = datarun.id === selectedDatarunID ? 'active' : '';\n  debugger;\n  const width = document.querySelector('.time-row').offsetWidth;\n  console.log(width);\n  return React.createElement(\"div\", {\n    className: \"time-row \".concat(activeClass),\n    onClick: () => onSelectDatarun(datarun.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, datarun.signal), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(DrawChart, {\n    dataRun: datarun,\n    isLoading: isLoading,\n    width: 900,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }))));\n};\n\nDatarun.propTypes = {\n  datarun: PropTypes.object,\n  isLoading: PropTypes.bool,\n  onSelectDatarun: PropTypes.func,\n  selectedDatarunID: PropTypes.string\n};\nexport default connect(state => ({\n  selectedDatarunID: getSelectedDatarunID(state)\n}), dispatch => ({\n  onSelectDatarun: datarunID => dispatch(selectDatarun(datarunID))\n}))(Datarun);","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/Datarun.jsx"],"names":["React","PropTypes","connect","selectDatarun","getSelectedDatarunID","DrawChart","Datarun","datarun","isLoading","onSelectDatarun","selectedDatarunID","activeClass","id","width","document","querySelector","offsetWidth","console","log","signal","propTypes","object","bool","func","string","state","dispatch","datarunID"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,aAAT,QAA8B,gCAA9B;AACA,SAASC,oBAAT,QAAqC,kCAArC;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,SAAX;AAAsBC,EAAAA,eAAtB;AAAuCC,EAAAA;AAAvC,CAAD,KAAgE;AAC5E,QAAMC,WAAW,GAAGJ,OAAO,CAACK,EAAR,KAAeF,iBAAf,GAAmC,QAAnC,GAA8C,EAAlE;AACA;AACA,QAAMG,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,WAAvB,EAAoCC,WAAlD;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACA,SACE;AAAK,IAAA,SAAS,qBAAcF,WAAd,CAAd;AAA2C,IAAA,OAAO,EAAE,MAAMF,eAAe,CAACF,OAAO,CAACK,EAAT,CAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKL,OAAO,CAACY,MAAb,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAI,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAEZ,OAApB;AAA6B,IAAA,SAAS,EAAEC,SAAxC;AAAmD,IAAA,KAAK,EAAE,GAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAJ,CAFF,CADF,CADF;AAQH,CAbD;;AAeAF,OAAO,CAACc,SAAR,GAAoB;AAChBb,EAAAA,OAAO,EAAEN,SAAS,CAACoB,MADH;AAEhBb,EAAAA,SAAS,EAAEP,SAAS,CAACqB,IAFL;AAGhBb,EAAAA,eAAe,EAAER,SAAS,CAACsB,IAHX;AAIhBb,EAAAA,iBAAiB,EAAET,SAAS,CAACuB;AAJb,CAApB;AAOA,eAAetB,OAAO,CAACuB,KAAK,KAAK;AAC7Bf,EAAAA,iBAAiB,EAAEN,oBAAoB,CAACqB,KAAD;AADV,CAAL,CAAN,EAElBC,QAAQ,KAAK;AACbjB,EAAAA,eAAe,EAAGkB,SAAD,IAAeD,QAAQ,CAACvB,aAAa,CAACwB,SAAD,CAAd;AAD3B,CAAL,CAFU,CAAP,CAIXrB,OAJW,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { selectDatarun } from '../../../model/actions/datarun';\nimport { getSelectedDatarunID } from '../../../model/selectors/datarun';\nimport DrawChart from './DrawChart';\n\nconst Datarun = ({ datarun, isLoading, onSelectDatarun, selectedDatarunID }) => {\n    const activeClass = datarun.id === selectedDatarunID ? 'active' : '';\n    debugger;\n    const width = document.querySelector('.time-row').offsetWidth;\n    console.log(width);\n    return (\n      <div className={`time-row ${activeClass}`} onClick={() => onSelectDatarun(datarun.id)}>\n        <ul>\n          <li>{datarun.signal}</li>\n          <li><DrawChart dataRun={datarun} isLoading={isLoading} width={900} /></li>\n        </ul>\n      </div>\n  );\n};\n\nDatarun.propTypes = {\n    datarun: PropTypes.object,\n    isLoading: PropTypes.bool,\n    onSelectDatarun: PropTypes.func,\n    selectedDatarunID: PropTypes.string,\n};\n\nexport default connect(state => ({\n    selectedDatarunID: getSelectedDatarunID(state),\n}), dispatch => ({\n    onSelectDatarun: (datarunID) => dispatch(selectDatarun(datarunID)),\n}))(Datarun);\n"]},"metadata":{},"sourceType":"module"}