{"ast":null,"code":"import * as d3 from 'd3';\nlet brush = null;\nlet brushContext = null;\n\nfunction getScale(width, height, dataRun) {\n  let minValue = Number.MAX_SAFE_INTEGER;\n  let maxValue = Number.MIN_SAFE_INTEGER;\n  const timeSeries = dataRun.timeSeries;\n  const timeSeriesMin = timeSeries[0][0];\n  const timeSeriesMax = timeSeries[timeSeries.length - 1][0];\n  const x = d3.scaleTime().range([0, width]);\n  const y = d3.scaleLinear().range([height, 0]);\n  minValue = Math.min(minValue, timeSeriesMin) ? timeSeriesMin : minValue;\n  maxValue = maxValue < timeSeriesMax ? timeSeriesMax : maxValue;\n  x.domain([minValue, maxValue]);\n  y.domain([-1, 1]);\n  return {\n    x,\n    y\n  };\n}\n\nexport function drawBrush(element, width, onPeriodTimeChange) {\n  width -= 25;\n  const brushHeight = 43;\n  const xRange = d3.scaleTime().range([0, width]);\n  brush = d3.brushX().extent([[0, 0], [width, brushHeight]]);\n  brushContext = element.append('g').attr('class', 'brushContext');\n  brushContext.append('g').attr('class', 'brush').attr('transform', 'translate(5, 3)').call(brush).call(brush.move, xRange.range());\n  brush.on('brush', updateBrushPeriod).on('end', () => {\n    d3.event.selection && onPeriodTimeChange(d3.event.selection);\n  });\n}\nexport function updateBrushPeriod() {\n  if (!d3.event.sourceEvent || !d3.event.selection) return;\n  let currentBrush = d3.select(this);\n\n  if (currentBrush.attr('simulate')) {\n    return;\n  }\n\n  let selection = d3.selectAll('.brush:not([active])');\n  currentBrush.attr('active', true);\n  selection.attr('simulate', true);\n  selection.call(brush.move, d3.event.selection).on('end', () => {\n    selection.attr('simulate', null);\n    currentBrush.attr('active', null);\n  });\n  currentBrush.attr('active', null);\n  selection.attr('simulate', null);\n}\nexport function drawChart(width, height, dataRun, onPeriodTimeChange) {\n  const chartWidth = width - 35;\n  const timeSeries = dataRun.timeSeries,\n        eventWindows = dataRun.eventWindows;\n\n  const _getScale = getScale(chartWidth, height, dataRun),\n        x = _getScale.x,\n        y = _getScale.y;\n\n  const line = d3.line().x(d => x(d[0])).y(d => y(d[1]));\n  const highlightedEvents = eventWindows.map(event => timeSeries.slice(event[0], event[1] + 2));\n  const svg = d3.select(\"._\".concat(dataRun.id)).append('svg').attr('width', chartWidth).attr('class', 'wave-chart');\n  svg.append('path').attr('class', 'wave-data').attr('d', line(timeSeries)).attr('transform', 'translate(10, 6)');\n  highlightedEvents.map(event => svg.append('path').attr('class', 'wave-event').attr('transform', 'translate(10, 6)').attr('d', line(event)));\n  drawBrush(svg, width, onPeriodTimeChange);\n}","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/chartUtils.js"],"names":["d3","brush","brushContext","getScale","width","height","dataRun","minValue","Number","MAX_SAFE_INTEGER","maxValue","MIN_SAFE_INTEGER","timeSeries","timeSeriesMin","timeSeriesMax","length","x","scaleTime","range","y","scaleLinear","Math","min","domain","drawBrush","element","onPeriodTimeChange","brushHeight","xRange","brushX","extent","append","attr","call","move","on","updateBrushPeriod","event","selection","sourceEvent","currentBrush","select","selectAll","drawChart","chartWidth","eventWindows","line","d","highlightedEvents","map","slice","svg","id"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\n\nlet brush = null;\nlet brushContext = null;\n\nfunction getScale(width, height, dataRun) {\n  let minValue = Number.MAX_SAFE_INTEGER;\n  let maxValue = Number.MIN_SAFE_INTEGER;\n  const { timeSeries } = dataRun;\n  const timeSeriesMin = timeSeries[0][0];\n  const timeSeriesMax = timeSeries[timeSeries.length - 1][0];\n  const x = d3.scaleTime().range([0, width]);\n  const y = d3.scaleLinear().range([height, 0]);\n\n  minValue = Math.min(minValue, timeSeriesMin) ? timeSeriesMin : minValue;\n  maxValue = maxValue < timeSeriesMax ? timeSeriesMax : maxValue;\n  x.domain([minValue, maxValue]);\n  y.domain([-1, 1]);\n\n  return { x, y };\n}\n\nexport function drawBrush(element, width, onPeriodTimeChange) {\n  width -= 25;\n  const brushHeight = 43;\n  const xRange = d3.scaleTime().range([0, width]);\n  brush = d3.brushX().extent([[0, 0], [width, brushHeight]]);\n  brushContext = element.append('g').attr('class', 'brushContext');\n\n  brushContext\n    .append('g')\n    .attr('class', 'brush')\n    .attr('transform', 'translate(5, 3)')\n    .call(brush)\n    .call(brush.move, xRange.range());\n\n    brush\n      .on('brush', updateBrushPeriod)\n      .on('end', () => { d3.event.selection && onPeriodTimeChange(d3.event.selection); });\n}\n\nexport function updateBrushPeriod() {\n  if (!d3.event.sourceEvent || !d3.event.selection) return;\n  let currentBrush = d3.select(this);\n\n  if (currentBrush.attr('simulate')) {\n    return;\n  }\n\n  let selection = d3.selectAll('.brush:not([active])');\n  currentBrush.attr('active', true);\n  selection.attr('simulate', true);\n\n  selection\n    .call(brush.move, d3.event.selection)\n    .on('end', () => {\n        selection.attr('simulate', null);\n        currentBrush.attr('active', null);\n      });\n\n  currentBrush.attr('active', null);\n  selection.attr('simulate', null);\n}\n\nexport function drawChart(width, height, dataRun, onPeriodTimeChange) {\n  const chartWidth = width - 35;\n  const { timeSeries, eventWindows } = dataRun;\n  const { x, y } = getScale(chartWidth, height, dataRun);\n  const line = d3\n    .line()\n    .x(d => x(d[0]))\n    .y(d => y(d[1]));\n\n  const highlightedEvents = eventWindows.map(event => timeSeries.slice(event[0], event[1] + 2));\n  const svg = d3\n    .select(`._${dataRun.id}`)\n    .append('svg')\n    .attr('width', chartWidth)\n    .attr('class', 'wave-chart');\n\n  svg\n    .append('path')\n    .attr('class', 'wave-data')\n    .attr('d', line(timeSeries))\n    .attr('transform', 'translate(10, 6)');\n\n  highlightedEvents.map(event =>\n    svg\n      .append('path')\n      .attr('class', 'wave-event')\n      .attr('transform', 'translate(10, 6)')\n      .attr('d', line(event)),\n  );\n\n  drawBrush(svg, width, onPeriodTimeChange);\n}\n"]},"metadata":{},"sourceType":"module"}