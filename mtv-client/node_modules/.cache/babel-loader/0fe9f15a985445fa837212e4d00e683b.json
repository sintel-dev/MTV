{"ast":null,"code":"var _jsxFileName = \"/home/sergiu/Projects/mtv-react/src/components/Landing/Experiments.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Loader from '../Common/Loader';\nimport { getFilteredExperiments, getIsExperimentsLoading, getSelectedPipeline } from '../../model/selectors/projects';\nimport { selectExperiment } from '../../model/actions/landing';\n\nconst renderExperiment = (experiment, index, onSelectExperiment) => React.createElement(\"div\", {\n  className: \"cell\",\n  key: index,\n  onClick: () => onSelectExperiment(experiment.name),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  },\n  __self: this\n}, React.createElement(\"h3\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}, \"#\", index + 1, \" \", experiment.dataset, \"_\", experiment.pipeline), React.createElement(\"div\", {\n  className: \"item-data\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}, React.createElement(\"ul\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, React.createElement(\"li\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n}, \"Signals: \", experiment.dataruns.length), React.createElement(\"li\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19\n  },\n  __self: this\n}, \"DC: \", experiment.date_creation.substring(0, 10)))));\n\nconst Experiments = ({\n  isExperimentsLoading,\n  filteredExperiments,\n  onSelectExperiment,\n  selectedPipeline\n}) => React.createElement(\"div\", {\n  className: \"item-row scroll-style\",\n  id: \"experiments\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24\n  },\n  __self: this\n}, React.createElement(\"h2\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25\n  },\n  __self: this\n}, \"Experiments\"), React.createElement(\"div\", {\n  className: \"item-wrapper\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26\n  },\n  __self: this\n}, React.createElement(Loader, {\n  isLoading: isExperimentsLoading,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27\n  },\n  __self: this\n}, filteredExperiments.length ? filteredExperiments.map((experiment, index) => renderExperiment(experiment, index, onSelectExperiment, selectedPipeline)) : React.createElement(\"h2\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32\n  },\n  __self: this\n}, \"No experiments found\"))));\n\nExperiments.propTypes = {\n  filteredExperiments: PropTypes.array,\n  isExperimentsLoading: PropTypes.bool,\n  onSelectExperiment: PropTypes.func,\n  selectedPipeline: PropTypes.string\n};\nexport default connect(state => ({\n  filteredExperiments: getFilteredExperiments(state),\n  isExperimentsLoading: getIsExperimentsLoading(state),\n  selectedPipeline: getSelectedPipeline(state)\n}), dispatch => ({\n  onSelectExperiment: experiment => dispatch(selectExperiment(experiment))\n}))(Experiments);","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Landing/Experiments.jsx"],"names":["React","PropTypes","connect","Loader","getFilteredExperiments","getIsExperimentsLoading","getSelectedPipeline","selectExperiment","renderExperiment","experiment","index","onSelectExperiment","name","dataset","pipeline","dataruns","length","date_creation","substring","Experiments","isExperimentsLoading","filteredExperiments","selectedPipeline","map","propTypes","array","bool","func","string","state","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SACEC,sBADF,EAEEC,uBAFF,EAGEC,mBAHF,QAIO,gCAJP;AAKA,SAASC,gBAAT,QAAiC,6BAAjC;;AAGA,MAAMC,gBAAgB,GAAG,CAACC,UAAD,EAAaC,KAAb,EAAoBC,kBAApB,KACvB;AAAK,EAAA,SAAS,EAAC,MAAf;AAAsB,EAAA,GAAG,EAAED,KAA3B;AAAkC,EAAA,OAAO,EAAE,MAAMC,kBAAkB,CAACF,UAAU,CAACG,IAAZ,CAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAMF,KAAK,GAAG,CAAd,OAAkBD,UAAU,CAACI,OAA7B,OAAuCJ,UAAU,CAACK,QAAlD,CADF,EAEE;AAAK,EAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAcL,UAAU,CAACM,QAAX,CAAoBC,MAAlC,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAASP,UAAU,CAACQ,aAAX,CAAyBC,SAAzB,CAAmC,CAAnC,EAAsC,EAAtC,CAAT,CAFF,CADA,CAFF,CADF;;AAUA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,oBAAF;AAAwBC,EAAAA,mBAAxB;AAA6CV,EAAAA,kBAA7C;AAAiEW,EAAAA;AAAjE,CAAD,KAClB;AAAK,EAAA,SAAS,EAAC,uBAAf;AAAuC,EAAA,EAAE,EAAC,aAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAK,EAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,MAAD;AAAQ,EAAA,SAAS,EAAEF,oBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAEMC,mBAAmB,CAACL,MAApB,GACEK,mBAAmB,CAACE,GAApB,CAAwB,CAACd,UAAD,EAAaC,KAAb,KACxBF,gBAAgB,CAACC,UAAD,EAAaC,KAAb,EAAoBC,kBAApB,EAAwCW,gBAAxC,CADhB,CADF,GAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BALR,CADF,CAFF,CADF;;AAeAH,WAAW,CAACK,SAAZ,GAAwB;AACtBH,EAAAA,mBAAmB,EAAEpB,SAAS,CAACwB,KADT;AAEtBL,EAAAA,oBAAoB,EAAEnB,SAAS,CAACyB,IAFV;AAGtBf,EAAAA,kBAAkB,EAAEV,SAAS,CAAC0B,IAHR;AAItBL,EAAAA,gBAAgB,EAAErB,SAAS,CAAC2B;AAJN,CAAxB;AAOA,eAAe1B,OAAO,CAAC2B,KAAK,KAAK;AAC/BR,EAAAA,mBAAmB,EAAEjB,sBAAsB,CAACyB,KAAD,CADZ;AAE/BT,EAAAA,oBAAoB,EAAEf,uBAAuB,CAACwB,KAAD,CAFd;AAG/BP,EAAAA,gBAAgB,EAAEhB,mBAAmB,CAACuB,KAAD;AAHN,CAAL,CAAN,EAIlBC,QAAQ,KAAK;AACfnB,EAAAA,kBAAkB,EAAGF,UAAD,IAAgBqB,QAAQ,CAACvB,gBAAgB,CAACE,UAAD,CAAjB;AAD7B,CAAL,CAJU,CAAP,CAMXU,WANW,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Loader from '../Common/Loader';\nimport {\n  getFilteredExperiments,\n  getIsExperimentsLoading,\n  getSelectedPipeline,\n} from '../../model/selectors/projects';\nimport { selectExperiment } from '../../model/actions/landing';\n\n\nconst renderExperiment = (experiment, index, onSelectExperiment) => (\n  <div className=\"cell\" key={index} onClick={() => onSelectExperiment(experiment.name)}>\n    <h3>#{index + 1} {experiment.dataset}_{experiment.pipeline}</h3>\n    <div className=\"item-data\">\n    <ul>\n      <li>Signals: {experiment.dataruns.length}</li>\n      <li>DC: {experiment.date_creation.substring(0, 10)}</li>\n    </ul>\n  </div>\n    </div>);\nconst Experiments = ({ isExperimentsLoading, filteredExperiments, onSelectExperiment, selectedPipeline }) => (\n  <div className=\"item-row scroll-style\" id=\"experiments\">\n    <h2>Experiments</h2>\n    <div className=\"item-wrapper\">\n      <Loader isLoading={isExperimentsLoading}>\n        {\n            filteredExperiments.length ?\n              filteredExperiments.map((experiment, index) =>\n              renderExperiment(experiment, index, onSelectExperiment, selectedPipeline)) :\n              <h2>No experiments found</h2>\n          }\n      </Loader>\n    </div>\n  </div>);\n\nExperiments.propTypes = {\n  filteredExperiments: PropTypes.array,\n  isExperimentsLoading: PropTypes.bool,\n  onSelectExperiment: PropTypes.func,\n  selectedPipeline: PropTypes.string,\n};\n\nexport default connect(state => ({\n  filteredExperiments: getFilteredExperiments(state),\n  isExperimentsLoading: getIsExperimentsLoading(state),\n  selectedPipeline: getSelectedPipeline(state),\n}), dispatch => ({\n  onSelectExperiment: (experiment) => dispatch(selectExperiment(experiment)),\n}))(Experiments);\n"]},"metadata":{},"sourceType":"module"}