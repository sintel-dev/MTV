{"ast":null,"code":"var _jsxFileName = \"/home/sergiu/Projects/mtv-react/src/components/Landing/Projects.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Loader from '../Common/Loader';\nimport { getProjectsData } from '../../model/selectors/projects';\nimport { selectProject } from '../../model/actions/landing';\n\nconst setActiveProject = (props, project) => {\n  console.log(project); // props.onSelectProject(project);\n  // console.log(project);\n};\n\nconst renderProject = (project, index, onSelectProject) => React.createElement(\"div\", {\n  className: \"cell\",\n  key: index,\n  onClick: setActiveProject,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}, React.createElement(\"h3\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}, project.name), React.createElement(\"div\", {\n  className: \"item-data\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, React.createElement(\"ul\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n}, React.createElement(\"li\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19\n  },\n  __self: this\n}, project.signalNum, \" Signals\"), React.createElement(\"li\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}, project.pipelines.length, \" unique pipelines\")), React.createElement(\"ul\", {\n  className: \"last\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22\n  },\n  __self: this\n}, React.createElement(\"li\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23\n  },\n  __self: this\n}, project.experimentNum, \" experiments\"))));\n\nconst Projects = props => {\n  const _props$projectsData = props.projectsData,\n        isProjectsLoading = _props$projectsData.isProjectsLoading,\n        projectsList = _props$projectsData.projectsList;\n  const onSelectProject = props.onSelectProject;\n  return React.createElement(\"div\", {\n    className: \"item-row scroll-style\",\n    id: \"projects\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Datasets\"), React.createElement(\"div\", {\n    className: \"item-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(Loader, {\n    isLoading: isProjectsLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, projectsList.projects && projectsList.projects.length ? projectsList.projects.map((project, index) => renderProject(project, index, onSelectProject)) : React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"No datasets have been found\"))));\n};\n\nProjects.propTypes = {\n  projectsData: PropTypes.object,\n  onSelectProject: PropTypes.func\n};\nexport default connect(state => ({\n  projectsData: getProjectsData(state)\n}), dispatch => ({\n  onSelectProject: project => dispatch(selectProject(project))\n}))(Projects);","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Landing/Projects.jsx"],"names":["React","PropTypes","connect","Loader","getProjectsData","selectProject","setActiveProject","props","project","console","log","renderProject","index","onSelectProject","name","signalNum","pipelines","length","experimentNum","Projects","projectsData","isProjectsLoading","projectsList","projects","map","propTypes","object","func","state","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,aAAT,QAA8B,6BAA9B;;AAEA,MAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAC3CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ,EAD2C,CAE3C;AACA;AACD,CAJD;;AAMA,MAAMG,aAAa,GAAG,CAACH,OAAD,EAAUI,KAAV,EAAiBC,eAAjB,KACpB;AAAK,EAAA,SAAS,EAAC,MAAf;AAAsB,EAAA,GAAG,EAAED,KAA3B;AAAkC,EAAA,OAAO,EAAEN,gBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAKE,OAAO,CAACM,IAAb,CADF,EAEE;AAAK,EAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAKN,OAAO,CAACO,SAAb,aADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAKP,OAAO,CAACQ,SAAR,CAAkBC,MAAvB,sBAFF,CADF,EAKE;AAAI,EAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAKT,OAAO,CAACU,aAAb,iBADF,CALF,CAFF,CADF;;AAcA,MAAMC,QAAQ,GAAIZ,KAAD,IAAW;AAAA,8BACkBA,KAAK,CAACa,YADxB;AAAA,QAClBC,iBADkB,uBAClBA,iBADkB;AAAA,QACCC,YADD,uBACCA,YADD;AAAA,QAElBT,eAFkB,GAEEN,KAFF,CAElBM,eAFkB;AAG1B,SACE;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAuC,IAAA,EAAE,EAAC,UAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAEQ,iBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEMC,YAAY,CAACC,QAAb,IAAyBD,YAAY,CAACC,QAAb,CAAsBN,MAA/C,GACEK,YAAY,CAACC,QAAb,CAAsBC,GAAtB,CAA0B,CAAChB,OAAD,EAAUI,KAAV,KAAoBD,aAAa,CAACH,OAAD,EAAUI,KAAV,EAAiBC,eAAjB,CAA3D,CADF,GAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAJR,CADF,CAFF,CADF;AAaD,CAhBD;;AAkBAM,QAAQ,CAACM,SAAT,GAAqB;AACnBL,EAAAA,YAAY,EAAEnB,SAAS,CAACyB,MADL;AAEnBb,EAAAA,eAAe,EAAEZ,SAAS,CAAC0B;AAFR,CAArB;AAKA,eAAezB,OAAO,CAAC0B,KAAK,KAAK;AAC/BR,EAAAA,YAAY,EAAEhB,eAAe,CAACwB,KAAD;AADE,CAAL,CAAN,EAElBC,QAAQ,KAAK;AACfhB,EAAAA,eAAe,EAAGL,OAAD,IAAaqB,QAAQ,CAACxB,aAAa,CAACG,OAAD,CAAd;AADvB,CAAL,CAFU,CAAP,CAIXW,QAJW,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Loader from '../Common/Loader';\nimport { getProjectsData } from '../../model/selectors/projects';\nimport { selectProject } from '../../model/actions/landing';\n\nconst setActiveProject = (props, project) => {\n  console.log(project);\n  // props.onSelectProject(project);\n  // console.log(project);\n};\n\nconst renderProject = (project, index, onSelectProject) => (\n  <div className=\"cell\" key={index} onClick={setActiveProject}>\n    <h3>{project.name}</h3>\n    <div className=\"item-data\">\n      <ul>\n        <li>{project.signalNum} Signals</li>\n        <li>{project.pipelines.length} unique pipelines</li>\n      </ul>\n      <ul className=\"last\">\n        <li>{project.experimentNum} experiments</li>\n      </ul>\n    </div>\n  </div>);\n\nconst Projects = (props) => {\n  const { isProjectsLoading, projectsList } = props.projectsData;\n  const { onSelectProject } = props;\n  return (\n    <div className=\"item-row scroll-style\" id=\"projects\">\n      <h2>Datasets</h2>\n      <div className=\"item-wrapper\">\n        <Loader isLoading={isProjectsLoading}>\n          {\n              projectsList.projects && projectsList.projects.length ?\n                projectsList.projects.map((project, index) => renderProject(project, index, onSelectProject)) :\n                <p>No datasets have been found</p>\n            }\n        </Loader>\n      </div>\n    </div>);\n};\n\nProjects.propTypes = {\n  projectsData: PropTypes.object,\n  onSelectProject: PropTypes.func,\n};\n\nexport default connect(state => ({\n  projectsData: getProjectsData(state),\n}), dispatch => ({\n  onSelectProject: (project) => dispatch(selectProject(project)),\n}))(Projects);\n"]},"metadata":{},"sourceType":"module"}