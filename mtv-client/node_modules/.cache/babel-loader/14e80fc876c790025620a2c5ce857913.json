{"ast":null,"code":"import { api } from './utils';\nimport { getSelectedPipeline } from '../selectors/projects'; // http://127.0.0.1:3000/api/v1/experiments/\n// http://127.0.0.1:3000/api/v1/pipelines/\n// http://127.0.0.1:3000/api/v1/datasets/\n\nexport function fetchExperiments() {\n  return function (dispatch) {\n    const promise = api.get('experiments');\n    dispatch({\n      type: 'GET_EXPERIMENTS',\n      promise\n    });\n    return promise;\n  };\n}\nexport function fetchPipelines() {\n  return function (dispatch) {\n    const promise = api.get('pipelines');\n    dispatch({\n      type: 'GET_PIPELINES',\n      promise\n    });\n    return promise;\n  };\n}\nexport function fetchDatasets() {\n  return function (dispatch) {\n    const promise = api.get('datasets');\n    dispatch({\n      type: 'GET_DATASETS',\n      promise\n    });\n    return promise;\n  };\n}\nexport function fetchProjects() {\n  return function (dispatch) {\n    const promise = Promise.all([dispatch(fetchExperiments()), dispatch(fetchPipelines()), dispatch(fetchDatasets())]);\n    dispatch({\n      type: 'FETCH_PROJECTS',\n      promise\n    });\n  };\n}\nexport function selectProject(activeProject) {\n  return function (dispatch) {\n    dispatch({\n      type: 'SELECT_PROJECT',\n      activeProject\n    });\n  };\n}\nexport function selectPipeline(pipelineName) {\n  return function (dispatch, getState) {\n    const currentPipeline = getSelectedPipeline(getState());\n    dispatch({\n      type: 'SELECT_PIPELINE',\n      pipelineName\n    }); // if (pipelineName !== currentPipeline) {\n    //     dispatch({ type: 'SELECT_PIPELINE', pipelineName });\n    // } else {\n    //     dispatch({ type: 'SELECT_PIPELINE', 'null' });\n    // }\n  };\n}\nexport function selectExperiment(experimentName) {\n  return function (dispatch) {\n    dispatch({\n      type: 'SELECT_EXPERIMENT',\n      experimentName\n    });\n  };\n}","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/model/actions/landing.js"],"names":["api","getSelectedPipeline","fetchExperiments","dispatch","promise","get","type","fetchPipelines","fetchDatasets","fetchProjects","Promise","all","selectProject","activeProject","selectPipeline","pipelineName","getState","currentPipeline","selectExperiment","experimentName"],"mappings":"AAAA,SAASA,GAAT,QAAoB,SAApB;AACA,SAASC,mBAAT,QAAoC,uBAApC,C,CAEA;AACA;AACA;;AAEA,OAAO,SAASC,gBAAT,GAA4B;AAC/B,SAAO,UAASC,QAAT,EAAmB;AACtB,UAAMC,OAAO,GAAGJ,GAAG,CAACK,GAAJ,CAAQ,aAAR,CAAhB;AACAF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,iBAAR;AAA2BF,MAAAA;AAA3B,KAAD,CAAR;AACA,WAAOA,OAAP;AACH,GAJD;AAKH;AAED,OAAO,SAASG,cAAT,GAA0B;AAC7B,SAAO,UAAUJ,QAAV,EAAoB;AACvB,UAAMC,OAAO,GAAGJ,GAAG,CAACK,GAAJ,CAAQ,WAAR,CAAhB;AACAF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,eAAR;AAAyBF,MAAAA;AAAzB,KAAD,CAAR;AACA,WAAOA,OAAP;AACH,GAJD;AAKH;AAED,OAAO,SAASI,aAAT,GAAyB;AAC5B,SAAO,UAASL,QAAT,EAAmB;AACtB,UAAMC,OAAO,GAAGJ,GAAG,CAACK,GAAJ,CAAQ,UAAR,CAAhB;AACAF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,cAAR;AAAwBF,MAAAA;AAAxB,KAAD,CAAR;AACA,WAAOA,OAAP;AACH,GAJD;AAKH;AAED,OAAO,SAASK,aAAT,GAAyB;AAC5B,SAAO,UAASN,QAAT,EAAmB;AACtB,UAAMC,OAAO,GAAGM,OAAO,CAACC,GAAR,CAAY,CACxBR,QAAQ,CAACD,gBAAgB,EAAjB,CADgB,EAExBC,QAAQ,CAACI,cAAc,EAAf,CAFgB,EAGxBJ,QAAQ,CAACK,aAAa,EAAd,CAHgB,CAAZ,CAAhB;AAKAL,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAE,gBADD;AAELF,MAAAA;AAFK,KAAD,CAAR;AAIH,GAVD;AAWH;AAED,OAAO,SAASQ,aAAT,CAAuBC,aAAvB,EAAsC;AACzC,SAAO,UAASV,QAAT,EAAmB;AACtBA,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,gBAAR;AAA0BO,MAAAA;AAA1B,KAAD,CAAR;AACH,GAFD;AAGH;AAED,OAAO,SAASC,cAAT,CAAwBC,YAAxB,EAAsC;AACzC,SAAO,UAASZ,QAAT,EAAmBa,QAAnB,EAA6B;AAChC,UAAMC,eAAe,GAAGhB,mBAAmB,CAACe,QAAQ,EAAT,CAA3C;AACAb,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,iBAAR;AAA2BS,MAAAA;AAA3B,KAAD,CAAR,CAFgC,CAGhC;AACA;AACA;AACA;AACA;AACH,GARD;AASH;AAED,OAAO,SAASG,gBAAT,CAA2BC,cAA3B,EAA2C;AAC9C,SAAO,UAAShB,QAAT,EAAmB;AACtBA,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,mBAAR;AAA6Ba,MAAAA;AAA7B,KAAD,CAAR;AACH,GAFD;AAGH","sourcesContent":["import { api } from './utils';\nimport { getSelectedPipeline } from '../selectors/projects';\n\n// http://127.0.0.1:3000/api/v1/experiments/\n// http://127.0.0.1:3000/api/v1/pipelines/\n// http://127.0.0.1:3000/api/v1/datasets/\n\nexport function fetchExperiments() {\n    return function(dispatch) {\n        const promise = api.get('experiments');\n        dispatch({ type: 'GET_EXPERIMENTS', promise });\n        return promise;\n    };\n}\n\nexport function fetchPipelines() {\n    return function (dispatch) {\n        const promise = api.get('pipelines');\n        dispatch({ type: 'GET_PIPELINES', promise });\n        return promise;\n    };\n}\n\nexport function fetchDatasets() {\n    return function(dispatch) {\n        const promise = api.get('datasets');\n        dispatch({ type: 'GET_DATASETS', promise });\n        return promise;\n    };\n}\n\nexport function fetchProjects() {\n    return function(dispatch) {\n        const promise = Promise.all([\n            dispatch(fetchExperiments()),\n            dispatch(fetchPipelines()),\n            dispatch(fetchDatasets()),\n        ]);\n        dispatch({\n            type: 'FETCH_PROJECTS',\n            promise,\n        });\n    };\n}\n\nexport function selectProject(activeProject) {\n    return function(dispatch) {\n        dispatch({ type: 'SELECT_PROJECT', activeProject });\n    };\n}\n\nexport function selectPipeline(pipelineName) {\n    return function(dispatch, getState) {\n        const currentPipeline = getSelectedPipeline(getState());\n        dispatch({ type: 'SELECT_PIPELINE', pipelineName });\n        // if (pipelineName !== currentPipeline) {\n        //     dispatch({ type: 'SELECT_PIPELINE', pipelineName });\n        // } else {\n        //     dispatch({ type: 'SELECT_PIPELINE', 'null' });\n        // }\n    };\n}\n\nexport function selectExperiment (experimentName) {\n    return function(dispatch) {\n        dispatch({ type: 'SELECT_EXPERIMENT', experimentName });\n    };\n}\n"]},"metadata":{},"sourceType":"module"}