{"ast":null,"code":"import * as d3 from 'd3';\n\nfunction getScale(w, h, dataRun) {\n  let minValue = Number.MAX_SAFE_INTEGER;\n  let maxValue = Number.MIN_SAFE_INTEGER;\n  const timeSeries = dataRun.timeSeries;\n  const timeSeriesMin = timeSeries[0][0];\n  const timeSeriesMax = timeSeries[timeSeries.length - 1][0];\n  const x = d3.scaleTime().range([0, w]);\n  const y = d3.scaleLinear().range([h, 0]);\n  minValue = minValue > timeSeriesMin ? timeSeriesMin : minValue;\n  maxValue = maxValue < timeSeriesMax ? timeSeriesMax : maxValue;\n  x.domain([minValue, maxValue]);\n  y.domain([-1, 1]);\n  return {\n    x,\n    y\n  };\n}\n\nfunction drawBrush(element, width, onPeriodTimeChange, selectedPeriod) {\n  const brushHeight = 43;\n  const xRange = d3.scaleTime().range([0, width]);\n  const brush = d3.brushX().extent([[0, 0], [width, brushHeight]]);\n  const brushContext = element.append('g').attr('class', 'brushContext');\n  brushContext.append('g').attr('class', 'brush').attr('transform', 'translate(5, 3)').call(brush).call(brush.move, xRange.range());\n\n  const onBrushChange = () => {\n    if (d3.event.sourceEvent && d3.event.sourceEvent.type === 'zoom') return;\n    onPeriodTimeChange(d3.event.selection);\n  };\n\n  brush.on('brush end', onBrushChange);\n}\n\nexport function drawChart(width, height, dataRun, onPeriodTimeChange, selectedPeriod) {\n  const chartWidth = width - 10;\n  const timeSeries = dataRun.timeSeries,\n        eventWindows = dataRun.eventWindows;\n\n  const _getScale = getScale(chartWidth, height, dataRun),\n        x = _getScale.x,\n        y = _getScale.y;\n\n  const line = d3.line().x(d => x(d[0])).y(d => y(d[1]));\n  const highlightedEvents = eventWindows.map(event => timeSeries.slice(event[0], event[1] + 2));\n  const svg = d3.select(\"._\".concat(dataRun.id)).append('svg').attr('width', chartWidth).attr('class', 'wave-chart');\n  svg.append('path').attr('class', 'wave-data').attr('d', line(timeSeries)).attr('transform', 'translate(10, 6)');\n  highlightedEvents.map(event => svg.append('path').attr('class', 'wave-event').attr('transform', 'translate(10, 6)').attr('d', line(event)));\n  drawBrush(svg, width, onPeriodTimeChange, selectedPeriod);\n}","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/chartUtils.js"],"names":["d3","getScale","w","h","dataRun","minValue","Number","MAX_SAFE_INTEGER","maxValue","MIN_SAFE_INTEGER","timeSeries","timeSeriesMin","timeSeriesMax","length","x","scaleTime","range","y","scaleLinear","domain","drawBrush","element","width","onPeriodTimeChange","selectedPeriod","brushHeight","xRange","brush","brushX","extent","brushContext","append","attr","call","move","onBrushChange","event","sourceEvent","type","selection","on","drawChart","height","chartWidth","eventWindows","line","d","highlightedEvents","map","slice","svg","select","id"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\n\nfunction getScale(w, h, dataRun) {\n    let minValue = Number.MAX_SAFE_INTEGER;\n    let maxValue = Number.MIN_SAFE_INTEGER;\n    const { timeSeries } = dataRun;\n    const timeSeriesMin = timeSeries[0][0];\n    const timeSeriesMax = timeSeries[timeSeries.length - 1][0];\n    const x = d3.scaleTime().range([0, w]);\n    const y = d3.scaleLinear().range([h, 0]);\n\n    minValue = minValue > timeSeriesMin ? timeSeriesMin : minValue;\n    maxValue = maxValue < timeSeriesMax ? timeSeriesMax : maxValue;\n    x.domain([minValue, maxValue]);\n    y.domain([-1, 1]);\n\n    return { x, y };\n  }\n\n  function drawBrush (element, width, onPeriodTimeChange, selectedPeriod) {\n    const brushHeight = 43;\n    const xRange = d3.scaleTime().range([0, width]);\n    const brush = d3.brushX()\n      .extent([[0, 0], [width, brushHeight]]);\n    const brushContext = element.append('g').attr('class', 'brushContext');\n\n    brushContext.append('g')\n      .attr('class', 'brush')\n      .attr('transform', 'translate(5, 3)')\n      .call(brush)\n      .call(brush.move, xRange.range());\n\n\n    const onBrushChange = () => {\n    if (d3.event.sourceEvent && d3.event.sourceEvent.type === 'zoom') return;\n      onPeriodTimeChange(d3.event.selection);\n    };\n    brush.on('brush end', onBrushChange);\n  }\n\nexport function drawChart(width, height, dataRun, onPeriodTimeChange, selectedPeriod) {\n    const chartWidth = width - 10;\n\n    const { timeSeries, eventWindows } = dataRun;\n    const { x, y } = getScale(chartWidth, height, dataRun);\n    const line = d3.line()\n      .x(d => x(d[0]))\n      .y(d => y(d[1]));\n\n    const highlightedEvents = eventWindows.map(event => timeSeries.slice(event[0], event[1] + 2));\n    const svg = d3.select(`._${dataRun.id}`)\n      .append('svg')\n      .attr('width', chartWidth)\n      .attr('class', 'wave-chart');\n\n    svg.append('path')\n      .attr('class', 'wave-data')\n      .attr('d', line(timeSeries))\n      .attr('transform', 'translate(10, 6)');\n\n    highlightedEvents.map(event =>\n      svg.append('path')\n        .attr('class', 'wave-event')\n        .attr('transform', 'translate(10, 6)')\n        .attr('d', line(event)),\n    );\n    drawBrush(svg, width, onPeriodTimeChange, selectedPeriod);\n  }\n"]},"metadata":{},"sourceType":"module"}