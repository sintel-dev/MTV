{"ast":null,"code":"import * as d3 from 'd3';\nlet brush = null;\nlet brushContext = null;\n\nfunction getScale(width, height, dataRun) {\n  let minValue = Number.MAX_SAFE_INTEGER;\n  let maxValue = Number.MIN_SAFE_INTEGER;\n  const timeSeries = dataRun.timeSeries;\n  const timeSeriesMin = timeSeries[0][0];\n  const timeSeriesMax = timeSeries[timeSeries.length - 1][0];\n  const x = d3.scaleTime().range([0, width]);\n  const y = d3.scaleLinear().range([height, 0]);\n  minValue = minValue > timeSeriesMin ? timeSeriesMin : minValue;\n  maxValue = maxValue < timeSeriesMax ? timeSeriesMax : maxValue;\n  x.domain([minValue, maxValue]);\n  y.domain([-1, 1]);\n  return {\n    x,\n    y\n  };\n}\n\nexport function drawBrush(element, width, onPeriodTimeChange) {\n  width -= 25;\n  const brushHeight = 43;\n  const xRange = d3.scaleTime().range([0, width]);\n  brush = d3.brushX().extent([[0, 0], [width, brushHeight]]);\n  brushContext = element.append('g').attr('class', 'brushContext');\n  brushContext.append('g').attr('class', 'brush').attr('transform', 'translate(5, 3)').call(brush).call(brush.move, xRange.range());\n  brush.on('brush end', () => {\n    // onPeriodTimeChange(d3.event.selection);\n    // console.log(this);\n    updateBrushPeriod();\n  });\n}\nexport function updateBrushPeriod() {\n  const eventRange = d3.event.selection;\n  if (!d3.event.sourceEvent || !eventRange) return;\n  brush.on('brush end', null);\n  const existingBrushes = d3.selectAll('.brush');\n  existingBrushes.call(brush.extend([0, 0], [0, 200])); // d3.select(this).transition().call(brush.move, eventRange);\n  // brush.on('brush end', null);\n  // existingBrushes\n  //   // .transition()\n  //   .call(brush.move, eventRange)\n  //   .on('end', null);\n}\nexport function drawChart(width, height, dataRun, onPeriodTimeChange) {\n  const chartWidth = width - 35;\n  const timeSeries = dataRun.timeSeries,\n        eventWindows = dataRun.eventWindows;\n\n  const _getScale = getScale(chartWidth, height, dataRun),\n        x = _getScale.x,\n        y = _getScale.y;\n\n  const line = d3.line().x(d => x(d[0])).y(d => y(d[1]));\n  const highlightedEvents = eventWindows.map(event => timeSeries.slice(event[0], event[1] + 2));\n  const svg = d3.select(\"._\".concat(dataRun.id)).append('svg').attr('width', chartWidth).attr('class', 'wave-chart');\n  svg.append('path').attr('class', 'wave-data').attr('d', line(timeSeries)).attr('transform', 'translate(10, 6)');\n  highlightedEvents.map(event => svg.append('path').attr('class', 'wave-event').attr('transform', 'translate(10, 6)').attr('d', line(event)));\n  drawBrush(svg, width, onPeriodTimeChange);\n}","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/chartUtils.js"],"names":["d3","brush","brushContext","getScale","width","height","dataRun","minValue","Number","MAX_SAFE_INTEGER","maxValue","MIN_SAFE_INTEGER","timeSeries","timeSeriesMin","timeSeriesMax","length","x","scaleTime","range","y","scaleLinear","domain","drawBrush","element","onPeriodTimeChange","brushHeight","xRange","brushX","extent","append","attr","call","move","on","updateBrushPeriod","eventRange","event","selection","sourceEvent","existingBrushes","selectAll","extend","drawChart","chartWidth","eventWindows","line","d","highlightedEvents","map","slice","svg","select","id"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\n\nlet brush = null;\nlet brushContext = null;\nfunction getScale(width, height, dataRun) {\n  let minValue = Number.MAX_SAFE_INTEGER;\n  let maxValue = Number.MIN_SAFE_INTEGER;\n  const { timeSeries } = dataRun;\n  const timeSeriesMin = timeSeries[0][0];\n  const timeSeriesMax = timeSeries[timeSeries.length - 1][0];\n  const x = d3.scaleTime().range([0, width]);\n  const y = d3.scaleLinear().range([height, 0]);\n\n  minValue = minValue > timeSeriesMin ? timeSeriesMin : minValue;\n  maxValue = maxValue < timeSeriesMax ? timeSeriesMax : maxValue;\n  x.domain([minValue, maxValue]);\n  y.domain([-1, 1]);\n\n  return { x, y };\n}\n\nexport function drawBrush(element, width, onPeriodTimeChange) {\n  width -= 25;\n  const brushHeight = 43;\n  const xRange = d3.scaleTime().range([0, width]);\n  brush = d3.brushX().extent([[0, 0], [width, brushHeight]]);\n  brushContext = element.append('g').attr('class', 'brushContext');\n\n  brushContext\n    .append('g')\n    .attr('class', 'brush')\n    .attr('transform', 'translate(5, 3)')\n    .call(brush)\n    .call(brush.move, xRange.range());\n\n\n  brush.on('brush end', () => {\n    // onPeriodTimeChange(d3.event.selection);\n    // console.log(this);\n    updateBrushPeriod();\n  });\n}\n\nexport function updateBrushPeriod() {\n  const eventRange = d3.event.selection;\n  if (!d3.event.sourceEvent || !eventRange) return;\n  brush.on('brush end', null);\n  const existingBrushes = d3.selectAll('.brush');\n\n  existingBrushes.call(brush.extend([0, 0], [0, 200]));\n\n  // d3.select(this).transition().call(brush.move, eventRange);\n\n  // brush.on('brush end', null);\n  // existingBrushes\n  //   // .transition()\n  //   .call(brush.move, eventRange)\n  //   .on('end', null);\n}\n\nexport function drawChart(width, height, dataRun, onPeriodTimeChange) {\n  const chartWidth = width - 35;\n  const { timeSeries, eventWindows } = dataRun;\n  const { x, y } = getScale(chartWidth, height, dataRun);\n  const line = d3\n    .line()\n    .x(d => x(d[0]))\n    .y(d => y(d[1]));\n\n  const highlightedEvents = eventWindows.map(event => timeSeries.slice(event[0], event[1] + 2));\n  const svg = d3\n    .select(`._${dataRun.id}`)\n    .append('svg')\n    .attr('width', chartWidth)\n    .attr('class', 'wave-chart');\n\n  svg\n    .append('path')\n    .attr('class', 'wave-data')\n    .attr('d', line(timeSeries))\n    .attr('transform', 'translate(10, 6)');\n\n  highlightedEvents.map(event =>\n    svg\n      .append('path')\n      .attr('class', 'wave-event')\n      .attr('transform', 'translate(10, 6)')\n      .attr('d', line(event)),\n  );\n\n  drawBrush(svg, width, onPeriodTimeChange);\n}\n"]},"metadata":{},"sourceType":"module"}