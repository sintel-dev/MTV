{"ast":null,"code":"var _jsxFileName = \"/home/sergiu/Projects/mtv-react/src/components/Landing/Experiments.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Loader from '../Common/Loader';\nimport { getFilteredExperiments, getIsExperimentsLoading, getSelectedPipeline, getSelectedExperiment } from '../../model/selectors/projects';\nimport { selectExperiment, selectPipeline } from '../../model/actions/landing';\n\nconst renderExperiment = (experiment, index, onSelectExperiment, selectedPipeline, selectedExperiment) => {\n  const activeClass = selectedPipeline || selectedExperiment === experiment.id ? 'active' : '';\n\n  const handleExperimentClick = () => {\n    onSelectExperiment(experiment.id);\n    onSelectPipeline(experiment.pipeline);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"cell \".concat(activeClass),\n    key: index,\n    onClick: () => handleExperimentClick(experiment),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"#\", index + 1, \" \", experiment.dataset, \"_\", experiment.pipeline), React.createElement(\"div\", {\n    className: \"item-data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Signals: \", experiment.dataruns.length), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"DC: \", experiment.date_creation.substring(0, 10)))));\n};\n\nconst Experiments = ({\n  isExperimentsLoading,\n  filteredExperiments,\n  onSelectExperiment,\n  selectedPipeline,\n  selectedExperiment,\n  onSelectPipeline\n}) => React.createElement(\"div\", {\n  className: \"item-row scroll-style\",\n  id: \"experiments\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40\n  },\n  __self: this\n}, React.createElement(\"h2\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41\n  },\n  __self: this\n}, \"Experiments\"), React.createElement(\"div\", {\n  className: \"item-wrapper\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 42\n  },\n  __self: this\n}, React.createElement(Loader, {\n  isLoading: isExperimentsLoading,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43\n  },\n  __self: this\n}, filteredExperiments.length ? filteredExperiments.map((experiment, index) => renderExperiment(experiment, index, onSelectExperiment, selectedPipeline, selectedExperiment, onSelectPipeline)) : React.createElement(\"h2\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48\n  },\n  __self: this\n}, \"No experiments found\"))));\n\nExperiments.propTypes = {\n  filteredExperiments: PropTypes.array,\n  isExperimentsLoading: PropTypes.bool,\n  onSelectExperiment: PropTypes.func,\n  selectedPipeline: PropTypes.string,\n  selectedExperiment: PropTypes.string,\n  onSelectPipeline: PropTypes.func\n};\nexport default connect(state => ({\n  filteredExperiments: getFilteredExperiments(state),\n  isExperimentsLoading: getIsExperimentsLoading(state),\n  selectedPipeline: getSelectedPipeline(state),\n  selectedExperiment: getSelectedExperiment(state)\n}), dispatch => ({\n  onSelectExperiment: experiment => dispatch(selectExperiment(experiment)),\n  onSelectPipeline: pipeline => dispatch(selectPipeline(pipeline))\n}))(Experiments);","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Landing/Experiments.jsx"],"names":["React","PropTypes","connect","Loader","getFilteredExperiments","getIsExperimentsLoading","getSelectedPipeline","getSelectedExperiment","selectExperiment","selectPipeline","renderExperiment","experiment","index","onSelectExperiment","selectedPipeline","selectedExperiment","activeClass","id","handleExperimentClick","onSelectPipeline","pipeline","dataset","dataruns","length","date_creation","substring","Experiments","isExperimentsLoading","filteredExperiments","map","propTypes","array","bool","func","string","state","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Loader from '../Common/Loader';\nimport {\n  getFilteredExperiments,\n  getIsExperimentsLoading,\n  getSelectedPipeline,\n  getSelectedExperiment,\n} from '../../model/selectors/projects';\nimport { selectExperiment, selectPipeline } from '../../model/actions/landing';\n\n\nconst renderExperiment = (experiment, index, onSelectExperiment, selectedPipeline, selectedExperiment) => {\n  const activeClass = selectedPipeline || selectedExperiment === experiment.id ? 'active' : '';\n  const handleExperimentClick = () => {\n    onSelectExperiment(experiment.id);\n    onSelectPipeline(experiment.pipeline);\n  };\n  return (\n    <div className={`cell ${activeClass}`} key={index} onClick={() => handleExperimentClick(experiment)}>\n      <h3>#{index + 1} {experiment.dataset}_{experiment.pipeline}</h3>\n      <div className=\"item-data\">\n        <ul>\n          <li>Signals: {experiment.dataruns.length}</li>\n          <li>DC: {experiment.date_creation.substring(0, 10)}</li>\n        </ul>\n      </div>\n    </div>);\n};\n\nconst Experiments = ({\n  isExperimentsLoading,\n  filteredExperiments,\n  onSelectExperiment,\n  selectedPipeline,\n  selectedExperiment,\n  onSelectPipeline,\n}) => (\n  <div className=\"item-row scroll-style\" id=\"experiments\">\n    <h2>Experiments</h2>\n    <div className=\"item-wrapper\">\n      <Loader isLoading={isExperimentsLoading}>\n        {\n          filteredExperiments.length ?\n            filteredExperiments.map((experiment, index) =>\n            renderExperiment(experiment, index, onSelectExperiment, selectedPipeline, selectedExperiment, onSelectPipeline)) :\n            <h2>No experiments found</h2>\n          }\n      </Loader>\n    </div>\n  </div>);\n\nExperiments.propTypes = {\n  filteredExperiments: PropTypes.array,\n  isExperimentsLoading: PropTypes.bool,\n  onSelectExperiment: PropTypes.func,\n  selectedPipeline: PropTypes.string,\n  selectedExperiment: PropTypes.string,\n  onSelectPipeline: PropTypes.func,\n};\n\nexport default connect(state => ({\n  filteredExperiments: getFilteredExperiments(state),\n  isExperimentsLoading: getIsExperimentsLoading(state),\n  selectedPipeline: getSelectedPipeline(state),\n  selectedExperiment: getSelectedExperiment(state),\n}), dispatch => ({\n  onSelectExperiment: (experiment) => dispatch(selectExperiment(experiment)),\n  onSelectPipeline: (pipeline) => dispatch(selectPipeline(pipeline)),\n}))(Experiments);\n"]},"metadata":{},"sourceType":"module"}