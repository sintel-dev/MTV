{"ast":null,"code":"var _jsxFileName = \"/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/DrawChart.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\n\nclass DrawChart extends Component {\n  constructor(props) {\n    super(props); // this.width = document.querySelector('.overview-wrapper').offsetWidth;\n\n    this.width = 1000;\n    this.height = 36;\n  }\n\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  getScale(w, h) {\n    let minValue = Number.MAX_SAFE_INTEGER;\n    let maxValue = Number.MIN_SAFE_INTEGER;\n    const timeSeries = this.props.dataRun.timeSeries;\n    const timeSeriesMin = timeSeries[0][0];\n    const timeSeriesMax = timeSeries[timeSeries.length - 1][0];\n    const x = d3.scaleTime().range([0, w]);\n    const y = d3.scaleLinear().range([h, 0]);\n    minValue = minValue > timeSeriesMin ? timeSeriesMin : minValue;\n    maxValue = maxValue < timeSeriesMax ? timeSeriesMax : maxValue;\n    x.domain([minValue, maxValue]);\n    y.domain([-1, 1]);\n    return {\n      x,\n      y\n    };\n  }\n\n  drawChart() {\n    const width = this.width - 10;\n    const _this$props$dataRun = this.props.dataRun,\n          timeSeries = _this$props$dataRun.timeSeries,\n          eventWindows = _this$props$dataRun.eventWindows;\n\n    const _this$getScale = this.getScale(width, this.height),\n          x = _this$getScale.x,\n          y = _this$getScale.y;\n\n    const line = d3.line().x(d => x(d[0])).y(d => y(d[1]));\n    const highlightedEvents = eventWindows.map(event => timeSeries.slice(event[0], event[1] + 2));\n    const svg = d3.select(\"._\".concat(this.props.dataRun.id)).append('svg').attr('width', width).attr('class', 'wave-chart');\n    svg.append('path').attr('class', 'wave-data').attr('d', line(timeSeries)).attr('transform', 'translate(10, 6)');\n    highlightedEvents.map(event => svg.append('path').attr('class', 'wave-event').attr('transform', 'translate(10, 6)').attr('d', line(event)));\n    this.drawBrush(svg);\n  }\n\n  drawBrush(element) {\n    if (this.props.isLoading) return;\n    const width = this.width;\n    const height = 43;\n    const xRange = d3.scaleTime().range([0, width]);\n    const brush = d3.brushX().extent([[0, 0], [width, height]]);\n    const brushContext = element.append('g').attr('class', 'brushContext');\n    brushContext.append('g').attr('class', 'brush').attr('transform', 'translate(5, 3)').call(brush).call(brush.move, xRange.range());\n    setTimeout(() => {\n      brush.on('brush end', brushChange);\n    }, 200);\n\n    const brushChange = () => {\n      console.log(d3.event.selection);\n      this.props.onTimeseriesPeriodChange(d3.event.selection);\n    }; // const onBrushChange = () => {\n    //   const area = d3.event.selection;\n    //   console.log(area);\n    // };\n\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"_\".concat(this.props.dataRun.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }) // @TODO - find a better way to target this element\n    ;\n  }\n\n}\n\nDrawChart.propTypes = {\n  dataRun: PropTypes.object,\n  onTimeseriesPeriodChange: PropTypes.func\n};\nexport default DrawChart;","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/DrawChart.jsx"],"names":["React","Component","PropTypes","d3","DrawChart","constructor","props","width","height","componentDidMount","drawChart","getScale","w","h","minValue","Number","MAX_SAFE_INTEGER","maxValue","MIN_SAFE_INTEGER","timeSeries","dataRun","timeSeriesMin","timeSeriesMax","length","x","scaleTime","range","y","scaleLinear","domain","eventWindows","line","d","highlightedEvents","map","event","slice","svg","select","id","append","attr","drawBrush","element","isLoading","xRange","brush","brushX","extent","brushContext","call","move","setTimeout","on","brushChange","console","log","selection","onTimeseriesPeriodChange","render","propTypes","object","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\n\nclass DrawChart extends Component {\n  constructor(props) {\n    super(props);\n    // this.width = document.querySelector('.overview-wrapper').offsetWidth;\n    this.width = 1000;\n    this.height = 36;\n  }\n\n    componentDidMount() {\n        this.drawChart();\n    }\n\n    getScale(w, h) {\n      let minValue = Number.MAX_SAFE_INTEGER;\n      let maxValue = Number.MIN_SAFE_INTEGER;\n      const { timeSeries } = this.props.dataRun;\n      const timeSeriesMin = timeSeries[0][0];\n      const timeSeriesMax = timeSeries[timeSeries.length - 1][0];\n      const x = d3.scaleTime().range([0, w]);\n      const y = d3.scaleLinear().range([h, 0]);\n\n      minValue = minValue > timeSeriesMin ? timeSeriesMin : minValue;\n      maxValue = maxValue < timeSeriesMax ? timeSeriesMax : maxValue;\n      x.domain([minValue, maxValue]);\n      y.domain([-1, 1]);\n\n      return { x, y };\n    }\n\n    drawChart() {\n      const width = this.width - 10;\n\n      const { timeSeries, eventWindows } = this.props.dataRun;\n      const { x, y } = this.getScale(width, this.height);\n      const line = d3.line()\n        .x(d => x(d[0]))\n        .y(d => y(d[1]));\n\n      const highlightedEvents = eventWindows.map(event => timeSeries.slice(event[0], event[1] + 2));\n      const svg = d3.select(`._${this.props.dataRun.id}`)\n        .append('svg')\n        .attr('width', width)\n        .attr('class', 'wave-chart');\n\n      svg.append('path')\n        .attr('class', 'wave-data')\n        .attr('d', line(timeSeries))\n        .attr('transform', 'translate(10, 6)');\n\n      highlightedEvents.map(event =>\n        svg.append('path')\n          .attr('class', 'wave-event')\n          .attr('transform', 'translate(10, 6)')\n          .attr('d', line(event)),\n      );\n      this.drawBrush(svg);\n    }\n\n    drawBrush (element) {\n      if (this.props.isLoading) return;\n      const { width } = this;\n      const height = 43;\n      const xRange = d3.scaleTime().range([0, width]);\n      const brush = d3.brushX()\n        .extent([[0, 0], [width, height]]);\n      const brushContext = element.append('g').attr('class', 'brushContext');\n\n      brushContext.append('g')\n        .attr('class', 'brush')\n        .attr('transform', 'translate(5, 3)')\n        .call(brush)\n        .call(brush.move, xRange.range());\n\n      setTimeout(() => {\n        brush.on('brush end', brushChange);\n      }, 200);\n      const brushChange = () => {\n        console.log(d3.event.selection);\n\n        this.props.onTimeseriesPeriodChange(d3.event.selection);\n      };\n\n\n      // const onBrushChange = () => {\n      //   const area = d3.event.selection;\n      //   console.log(area);\n      // };\n    }\n\n    render() {\n      return (\n        <div className={`_${this.props.dataRun.id}`} /> // @TODO - find a better way to target this element\n      );\n    }\n}\n\nDrawChart.propTypes = {\n  dataRun: PropTypes.object,\n  onTimeseriesPeriodChange: PropTypes.func,\n};\n\nexport default DrawChart;\n"]},"metadata":{},"sourceType":"module"}