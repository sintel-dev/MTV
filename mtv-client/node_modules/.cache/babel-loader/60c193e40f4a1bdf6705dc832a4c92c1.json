{"ast":null,"code":"import { createSelector } from 'reselect';\nimport { getIsExperimentsLoading, getExperimentsData, getSelectedExperiment } from './projects';\nexport const getExperimentDataRun = state => state.experimentData.dataruns;\nexport const getSelectedExperimentData = createSelector([getIsExperimentsLoading, getExperimentsData, getSelectedExperiment, getExperimentDataRun], (isExperimentsLoading, experiments, selectedExperimentID, dataRun) => {\n  // if (isExperimentsLoading) { return null; }\n  const experimentsList = experiments.experimentsList;\n  const experimentData = experimentsList.filter(experiment => experiment.id === selectedExperimentID);\n  return experiment;\n}); // export const getExperimentDatarun = (state) => state.experimentData;\n// export const getExperimentDataRun = (state) => state.experimentData.dataruns;","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/model/selectors/experiment.js"],"names":["createSelector","getIsExperimentsLoading","getExperimentsData","getSelectedExperiment","getExperimentDataRun","state","experimentData","dataruns","getSelectedExperimentData","isExperimentsLoading","experiments","selectedExperimentID","dataRun","experimentsList","filter","experiment","id"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,SAASC,uBAAT,EAAkCC,kBAAlC,EAAsDC,qBAAtD,QAAmF,YAAnF;AAEA,OAAO,MAAMC,oBAAoB,GAAIC,KAAD,IAAWA,KAAK,CAACC,cAAN,CAAqBC,QAA7D;AAEP,OAAO,MAAMC,yBAAyB,GAAGR,cAAc,CACnD,CAACC,uBAAD,EAA0BC,kBAA1B,EAA8CC,qBAA9C,EAAqEC,oBAArE,CADmD,EAEnD,CAACK,oBAAD,EAAuBC,WAAvB,EAAoCC,oBAApC,EAA0DC,OAA1D,KAAsE;AAClE;AADkE,QAE1DC,eAF0D,GAEtCH,WAFsC,CAE1DG,eAF0D;AAGlE,QAAMP,cAAc,GAAGO,eAAe,CAACC,MAAhB,CAAuBC,UAAU,IAAIA,UAAU,CAACC,EAAX,KAAkBL,oBAAvD,CAAvB;AACA,SAAOI,UAAP;AACH,CAPkD,CAAhD,C,CAUP;AAGA","sourcesContent":["import { createSelector } from 'reselect';\nimport { getIsExperimentsLoading, getExperimentsData, getSelectedExperiment } from './projects';\n\nexport const getExperimentDataRun = (state) => state.experimentData.dataruns;\n\nexport const getSelectedExperimentData = createSelector(\n    [getIsExperimentsLoading, getExperimentsData, getSelectedExperiment, getExperimentDataRun],\n    (isExperimentsLoading, experiments, selectedExperimentID, dataRun) => {\n        // if (isExperimentsLoading) { return null; }\n        const { experimentsList } = experiments;\n        const experimentData = experimentsList.filter(experiment => experiment.id === selectedExperimentID);\n        return experiment;\n    },\n);\n\n// export const getExperimentDatarun = (state) => state.experimentData;\n\n\n// export const getExperimentDataRun = (state) => state.experimentData.dataruns;\n"]},"metadata":{},"sourceType":"module"}