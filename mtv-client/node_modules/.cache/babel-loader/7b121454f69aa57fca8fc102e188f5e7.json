{"ast":null,"code":"var _jsxFileName = \"/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/DrawChart.jsx\";\nimport React, { useEffect, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\nimport { drawChart, updateBrushPeriod } from './chartUtils'; // class DrawChart extends Component {\n//   componentDidMount() {\n//     const { dataRun, onPeriodTimeChange, selectedPeriod } = this.props;\n//     const width = document.querySelector('.overview-wrapper').offsetWidth - 65;\n//     const height = 36;\n//     drawChart(width, height, dataRun, onPeriodTimeChange, selectedPeriod, this.props.dataRun.id);\n//   }\n//   UNSAFE_componentWillReceiveProps(nextProps) {\n//     const [nextPeriodStart, nextPeriodEnd] = nextProps.selectedPeriod;\n//     const [currentPeriodStart, currentPeriodEnd] = this.props.selectedPeriod;\n//     // if (this.props.selectedPeriod !== nextProps.selectedPeriod) {\n//     if (nextPeriodStart !== currentPeriodStart || nextPeriodEnd !== currentPeriodEnd) {\n//       // console.log(nextProps.selectedPeriod !== this.props.selectedPeriod);\n//       // const charts = d3.selectAll('.brush');\n//       // debugger;\n//       // charts.map(chart => {\n//       //   console.log(chart);\n//       //   return null;\n//       // });\n//       // debugger;\n//       updateBrushPeriod(nextProps.selectedPeriod);\n//      }\n//     // const width = document.querySelector('.overview-wrapper').offsetWidth - 65;\n//     // const height = 36;\n//     // const { dataRun, onPeriodTimeChange, selectedPeriod } = this.props;\n//     // if (nextProps.selectedPeriod !== this.props.selectedPeriod) {\n//     //   drawChart(width, height, dataRun, onPeriodTimeChange, selectedPeriod);\n//     // }\n//   }\n//   render() {\n//     return <div className={`_${this.props.dataRun.id}`} />; // @TODO - find a better way to target this element\n//   }\n// }\n\nconst DrawChart = ({\n  dataRun,\n  onPeriodTimeChange,\n  selectedPeriod\n}) => {\n  useEffect(() => {\n    const width = document.querySelector('.overview-wrapper').offsetWidth - 65;\n    const height = 36;\n    drawChart(width, height, dataRun, onPeriodTimeChange);\n    console.log(selectedPeriod);\n    debugger;\n  }, [dataRun, onPeriodTimeChange, selectedPeriod]);\n  return React.createElement(\"div\", {\n    className: \"_\".concat(dataRun.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }) // @TODO - find a better way to target this element\n  ;\n};\n\nDrawChart.propTypes = {\n  dataRun: PropTypes.object,\n  onPeriodTimeChange: PropTypes.func,\n  selectedPeriod: PropTypes.array\n};\nexport default DrawChart;","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/DrawChart.jsx"],"names":["React","useEffect","Component","PropTypes","d3","drawChart","updateBrushPeriod","DrawChart","dataRun","onPeriodTimeChange","selectedPeriod","width","document","querySelector","offsetWidth","height","console","log","id","propTypes","object","func","array"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AAEA,SAASC,SAAT,EAAoBC,iBAApB,QAA6C,cAA7C,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,kBAAX;AAA+BC,EAAAA;AAA/B,CAAD,KAAqD;AACrET,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,mBAAvB,EAA4CC,WAA5C,GAA0D,EAAxE;AACA,UAAMC,MAAM,GAAG,EAAf;AACAV,IAAAA,SAAS,CAACM,KAAD,EAAQI,MAAR,EAAgBP,OAAhB,EAAyBC,kBAAzB,CAAT;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYP,cAAZ;AACA;AACD,GANQ,EAMN,CAACF,OAAD,EAAUC,kBAAV,EAA8BC,cAA9B,CANM,CAAT;AAQA,SACE;AAAK,IAAA,SAAS,aAAMF,OAAO,CAACU,EAAd,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CACuC;AADvC;AAGD,CAZD;;AAcAX,SAAS,CAACY,SAAV,GAAsB;AACpBX,EAAAA,OAAO,EAAEL,SAAS,CAACiB,MADC;AAEpBX,EAAAA,kBAAkB,EAAEN,SAAS,CAACkB,IAFV;AAGpBX,EAAAA,cAAc,EAAEP,SAAS,CAACmB;AAHN,CAAtB;AAMA,eAAef,SAAf","sourcesContent":["import React, { useEffect, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\n\nimport { drawChart, updateBrushPeriod } from './chartUtils';\n\n// class DrawChart extends Component {\n//   componentDidMount() {\n//     const { dataRun, onPeriodTimeChange, selectedPeriod } = this.props;\n//     const width = document.querySelector('.overview-wrapper').offsetWidth - 65;\n//     const height = 36;\n//     drawChart(width, height, dataRun, onPeriodTimeChange, selectedPeriod, this.props.dataRun.id);\n//   }\n\n//   UNSAFE_componentWillReceiveProps(nextProps) {\n//     const [nextPeriodStart, nextPeriodEnd] = nextProps.selectedPeriod;\n//     const [currentPeriodStart, currentPeriodEnd] = this.props.selectedPeriod;\n//     // if (this.props.selectedPeriod !== nextProps.selectedPeriod) {\n//     if (nextPeriodStart !== currentPeriodStart || nextPeriodEnd !== currentPeriodEnd) {\n//       // console.log(nextProps.selectedPeriod !== this.props.selectedPeriod);\n\n//       // const charts = d3.selectAll('.brush');\n//       // debugger;\n//       // charts.map(chart => {\n//       //   console.log(chart);\n\n//       //   return null;\n//       // });\n//       // debugger;\n\n\n//       updateBrushPeriod(nextProps.selectedPeriod);\n//      }\n//     // const width = document.querySelector('.overview-wrapper').offsetWidth - 65;\n//     // const height = 36;\n//     // const { dataRun, onPeriodTimeChange, selectedPeriod } = this.props;\n//     // if (nextProps.selectedPeriod !== this.props.selectedPeriod) {\n//     //   drawChart(width, height, dataRun, onPeriodTimeChange, selectedPeriod);\n//     // }\n//   }\n\n//   render() {\n//     return <div className={`_${this.props.dataRun.id}`} />; // @TODO - find a better way to target this element\n//   }\n// }\n\nconst DrawChart = ({ dataRun, onPeriodTimeChange, selectedPeriod }) => {\n  useEffect(() => {\n    const width = document.querySelector('.overview-wrapper').offsetWidth - 65;\n    const height = 36;\n    drawChart(width, height, dataRun, onPeriodTimeChange);\n    console.log(selectedPeriod);\n    debugger;\n  }, [dataRun, onPeriodTimeChange, selectedPeriod]);\n\n  return (\n    <div className={`_${dataRun.id}`} /> // @TODO - find a better way to target this element\n  );\n};\n\nDrawChart.propTypes = {\n  dataRun: PropTypes.object,\n  onPeriodTimeChange: PropTypes.func,\n  selectedPeriod: PropTypes.array,\n};\n\nexport default DrawChart;\n"]},"metadata":{},"sourceType":"module"}