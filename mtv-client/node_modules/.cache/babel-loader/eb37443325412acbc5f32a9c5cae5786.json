{"ast":null,"code":"import _slicedToArray from \"/home/sergiu/Projects/mtv-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/DrawChart.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\n\nclass DrawChart extends Component {\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  getScale(w, h) {\n    let minValue = Number.MAX_SAFE_INTEGER;\n    let maxValue = Number.MIN_SAFE_INTEGER;\n    const timeSeries = this.props.dataRun.timeSeries;\n\n    const _timeSeries = _slicedToArray(timeSeries, 1),\n          _timeSeries$ = _slicedToArray(_timeSeries[0], 1),\n          timeSeriesMin = _timeSeries$[0];\n\n    const timeSeriesMax = timeSeries[timeSeries.length - 1][0];\n    const x = d3.scaleTime().range([0, w]);\n    const y = d3.scaleLinear().range([h, 0]);\n    minValue = minValue > timeSeriesMin ? timeSeriesMin : minValue;\n    maxValue = maxValue < timeSeriesMax ? timeSeriesMax : maxValue;\n    x.domain([minValue, maxValue]);\n    y.domain([-1, 1]);\n    return {\n      x,\n      y\n    };\n  }\n\n  drawChart() {\n    const width = this.props.timerowRef.offsetWidth;\n    console.log(this.props.timerowRef);\n    const height = 50;\n    const _this$props$dataRun = this.props.dataRun,\n          timeSeries = _this$props$dataRun.timeSeries,\n          eventWindows = _this$props$dataRun.eventWindows;\n\n    const _this$getScale = this.getScale(width, height),\n          x = _this$getScale.x,\n          y = _this$getScale.y;\n\n    const line = d3.line().x(d => x(d[0])).y(d => y(d[1]));\n\n    const highlightedEvents = () => eventWindows.map(event => timeSeries.slice(event[0], event[1] + 2));\n\n    const svg = d3.select(\"._\".concat(this.props.dataRun.id)).append('svg').attr('class', 'wave-chart');\n    svg.append('path').attr('class', 'wave-data').attr('d', line(timeSeries));\n    highlightedEvents().map(event => svg.append('path').attr('class', 'wave-event').attr('d', line(event)));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"_\".concat(this.props.dataRun.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    });\n  }\n\n}\n\nDrawChart.propTypes = {\n  dataRun: PropTypes.object\n};\nexport default DrawChart;","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Timeseries/Overview/DrawChart.jsx"],"names":["React","Component","PropTypes","d3","DrawChart","componentDidMount","drawChart","getScale","w","h","minValue","Number","MAX_SAFE_INTEGER","maxValue","MIN_SAFE_INTEGER","timeSeries","props","dataRun","timeSeriesMin","timeSeriesMax","length","x","scaleTime","range","y","scaleLinear","domain","width","timerowRef","offsetWidth","console","log","height","eventWindows","line","d","highlightedEvents","map","event","slice","svg","select","id","append","attr","render","propTypes","object"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\n\nclass DrawChart extends Component {\n    componentDidMount() {\n        this.drawChart();\n    }\n\n    getScale(w, h) {\n      let minValue = Number.MAX_SAFE_INTEGER;\n      let maxValue = Number.MIN_SAFE_INTEGER;\n      const { timeSeries } = this.props.dataRun;\n      const [[timeSeriesMin]] = timeSeries;\n      const timeSeriesMax = timeSeries[timeSeries.length - 1][0];\n      const x = d3.scaleTime().range([0, w]);\n      const y = d3.scaleLinear().range([h, 0]);\n\n      minValue = minValue > timeSeriesMin ? timeSeriesMin : minValue;\n      maxValue = maxValue < timeSeriesMax ? timeSeriesMax : maxValue;\n      x.domain([minValue, maxValue]);\n      y.domain([-1, 1]);\n\n      return { x, y };\n    }\n\n    drawChart() {\n      const width = this.props.timerowRef.offsetWidth;\n      console.log(this.props.timerowRef);\n\n\n      const height = 50;\n\n      const { timeSeries, eventWindows } = this.props.dataRun;\n      const { x, y } = this.getScale(width, height);\n      const line = d3.line()\n        .x(d => x(d[0]))\n        .y(d => y(d[1]));\n\n      const highlightedEvents = () =>\n        eventWindows.map(event => timeSeries.slice(event[0], event[1] + 2));\n\n      const svg = d3.select(`._${this.props.dataRun.id}`)\n        .append('svg')\n        .attr('class', 'wave-chart');\n\n      svg.append('path')\n        .attr('class', 'wave-data')\n        .attr('d', line(timeSeries));\n\n      highlightedEvents().map(event =>\n        svg.append('path')\n          .attr('class', 'wave-event')\n          .attr('d', line(event)),\n        );\n    }\n\n    render() {\n      return (\n        <div className={`_${this.props.dataRun.id}`} />\n      );\n    }\n}\n\nDrawChart.propTypes = {\n  dataRun: PropTypes.object,\n};\n\nexport default DrawChart;\n"]},"metadata":{},"sourceType":"module"}