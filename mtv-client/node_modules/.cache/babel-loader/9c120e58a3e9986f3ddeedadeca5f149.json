{"ast":null,"code":"var _jsxFileName = \"/home/sergiu/Projects/mtv-react/src/components/Landing/Pipelines.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Loader from '../Common/Loader';\nimport { getPipelinesData, getSelectedPipeline } from '../../model/selectors/projects';\nimport { selectPipeline } from '../../model/actions/landing';\n\nconst renderPipeline = (pipeline, index, onPipelineSelect, selectedPipeline) => {\n  const activeClass = selectedPipeline === pipeline.name ? 'active' : '';\n\n  const selectOrDeselect = pipelineName => {\n    console.log(pipelineName);\n\n    if (selectedPipeline) {\n      onPipelineSelect(pipelineName);\n    } else {\n      onPipelineSelect(null);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"cell \".concat(activeClass),\n    key: index,\n    onClick: () => selectOrDeselect(pipeline.name),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, pipeline.name), React.createElement(\"div\", {\n    className: \"item-data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"DC: \", pipeline.insert_time.substring(0, 10)), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"By: \", pipeline.created_by || 'null'))));\n};\n\nconst Pipelines = props => {\n  const _props$pipelinesData = props.pipelinesData,\n        pipelineList = _props$pipelinesData.pipelineList,\n        isPipelinesLoading = _props$pipelinesData.isPipelinesLoading;\n  const onSelectPipeline = props.onSelectPipeline,\n        selectedPipeline = props.selectedPipeline;\n  return React.createElement(\"div\", {\n    className: \"item-row scroll-style\",\n    id: \"pipelines\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Pipelines\"), React.createElement(\"div\", {\n    className: \"item-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Loader, {\n    isLoading: isPipelinesLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, pipelineList.length ? pipelineList.map((pipeline, index) => renderPipeline(pipeline, index, onSelectPipeline, selectedPipeline)) : React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"No pipelines have been found\"))));\n};\n\nPipelines.propTypes = {\n  pipelinesData: PropTypes.object,\n  onSelectPipeline: PropTypes.func,\n  selectedPipeline: PropTypes.string\n};\nexport default connect(state => ({\n  pipelinesData: getPipelinesData(state),\n  selectedPipeline: getSelectedPipeline(state)\n}), dispatch => ({\n  onSelectPipeline: pipelineName => dispatch(selectPipeline(pipelineName))\n}))(Pipelines); // export default Pipelines;","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Landing/Pipelines.jsx"],"names":["React","PropTypes","connect","Loader","getPipelinesData","getSelectedPipeline","selectPipeline","renderPipeline","pipeline","index","onPipelineSelect","selectedPipeline","activeClass","name","selectOrDeselect","pipelineName","console","log","insert_time","substring","created_by","Pipelines","props","pipelinesData","pipelineList","isPipelinesLoading","onSelectPipeline","length","map","propTypes","object","func","string","state","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Loader from '../Common/Loader';\nimport {\n  getPipelinesData,\n  getSelectedPipeline,\n} from '../../model/selectors/projects';\nimport { selectPipeline } from '../../model/actions/landing';\n\nconst renderPipeline = (pipeline, index, onPipelineSelect, selectedPipeline) => {\n  const activeClass = selectedPipeline === pipeline.name ? 'active' : '';\n\n  const selectOrDeselect = (pipelineName) => {\n    console.log(pipelineName);\n    if (selectedPipeline) {\n      onPipelineSelect(pipelineName);\n    } else {\n      onPipelineSelect(null);\n    }\n  };\n\n  return (\n    <div className={`cell ${activeClass}`} key={index} onClick={() => selectOrDeselect(pipeline.name)}>\n      <h3>{pipeline.name}</h3>\n      <div className=\"item-data\">\n        <ul>\n          <li>DC: {pipeline.insert_time.substring(0, 10)}</li>\n          <li>By: {pipeline.created_by || 'null' }</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nconst Pipelines = (props) => {\n  const { pipelineList, isPipelinesLoading } = props.pipelinesData;\n  const { onSelectPipeline, selectedPipeline } = props;\n\n  return (\n    <div className=\"item-row scroll-style\" id=\"pipelines\">\n      <h2>Pipelines</h2>\n      <div className=\"item-wrapper\">\n        <Loader isLoading={isPipelinesLoading}>\n          {\n            pipelineList.length ?\n              pipelineList.map((pipeline, index) =>\n              renderPipeline(pipeline, index, onSelectPipeline, selectedPipeline)) :\n              <p>No pipelines have been found</p>\n          }\n        </Loader>\n      </div>\n    </div>\n  );\n};\n\nPipelines.propTypes = {\n  pipelinesData: PropTypes.object,\n  onSelectPipeline: PropTypes.func,\n  selectedPipeline: PropTypes.string,\n};\n\nexport default connect(state => ({\n  pipelinesData: getPipelinesData(state),\n  selectedPipeline: getSelectedPipeline(state),\n}), dispatch => ({\n  onSelectPipeline: (pipelineName) => dispatch(selectPipeline(pipelineName)),\n}))(Pipelines);\n\n// export default Pipelines;\n"]},"metadata":{},"sourceType":"module"}