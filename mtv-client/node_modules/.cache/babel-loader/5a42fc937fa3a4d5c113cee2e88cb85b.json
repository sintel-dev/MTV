{"ast":null,"code":"import _defineProperty from \"/home/sergiu/Projects/mtv-react/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSelector } from 'reselect';\nexport const getSelectedExperimentData = state => state.selectedExperimentData;\n\nconst groupDataBy = (prediction, option) => prediction.data.map(value => [Math.trunc(value[0]) * 1000, value[datarun.names.indexOf(option)]]);\n\nconst groupByEventWindows = (data, timestamps) => data.map(event => [timestamps.indexOf(Math.trunc(event.start_time) * 1000), timestamps.indexOf(Math.trunc(event.stop_time) * 1000), event.score, event.tag]);\n\nexport const getProcessedDataRuns = createSelector([getSelectedExperimentData], experimentData => {\n  if (experimentData.isExperimentDataLoading) {\n    return [];\n  }\n\n  return experimentData.data.dataruns.map(datarun => {\n    const timeSeries = groupDataBy(datarun.prediction, 'y_raw');\n    const timeseriesPred = groupDataBy(datarun.prediction, 'y_raw_hat');\n    const timeseriesErr = groupDataBy(datarun.prediction, 'es_raw');\n    const eventWindows = groupByEventWindows(datarun.events, timeSeries.map(series => series[0]));\n    return _objectSpread({}, datarun, {\n      timeSeries,\n      timeseriesPred,\n      timeseriesErr,\n      eventWindows\n    });\n  });\n});","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/model/selectors/experiment.js"],"names":["createSelector","getSelectedExperimentData","state","selectedExperimentData","groupDataBy","prediction","option","data","map","value","Math","trunc","datarun","names","indexOf","groupByEventWindows","timestamps","event","start_time","stop_time","score","tag","getProcessedDataRuns","experimentData","isExperimentDataLoading","dataruns","timeSeries","timeseriesPred","timeseriesErr","eventWindows","events","series"],"mappings":";;;;;;AAAA,SAASA,cAAT,QAA+B,UAA/B;AAEA,OAAO,MAAMC,yBAAyB,GAAIC,KAAD,IAAWA,KAAK,CAACC,sBAAnD;;AAEP,MAAMC,WAAW,GAAG,CAACC,UAAD,EAAaC,MAAb,KAAwBD,UAAU,CAACE,IAAX,CAAgBC,GAAhB,CAAoBC,KAAK,IAAI,CACjEC,IAAI,CAACC,KAAL,CAAWF,KAAK,CAAC,CAAD,CAAhB,IAAuB,IAD0C,EAEjEA,KAAK,CAACG,OAAO,CAACC,KAAR,CAAcC,OAAd,CAAsBR,MAAtB,CAAD,CAF4D,CAA7B,CAA5C;;AAKA,MAAMS,mBAAmB,GAAG,CAACR,IAAD,EAAOS,UAAP,KACvBT,IAAI,CAACC,GAAL,CAASS,KAAK,IAAI,CACfD,UAAU,CAACF,OAAX,CAAmBJ,IAAI,CAACC,KAAL,CAAWM,KAAK,CAACC,UAAjB,IAA+B,IAAlD,CADe,EAEfF,UAAU,CAACF,OAAX,CAAmBJ,IAAI,CAACC,KAAL,CAAWM,KAAK,CAACE,SAAjB,IAA8B,IAAjD,CAFe,EAGfF,KAAK,CAACG,KAHS,EAIfH,KAAK,CAACI,GAJS,CAAlB,CADL;;AAQA,OAAO,MAAMC,oBAAoB,GAAGtB,cAAc,CAC9C,CAACC,yBAAD,CAD8C,EAE7CsB,cAAD,IAAoB;AAChB,MAAIA,cAAc,CAACC,uBAAnB,EAA4C;AAAE,WAAO,EAAP;AAAY;;AAC1D,SAAOD,cAAc,CAAChB,IAAf,CAAoBkB,QAApB,CAA6BjB,GAA7B,CAAiCI,OAAO,IAAI;AAC/C,UAAMc,UAAU,GAAGtB,WAAW,CAACQ,OAAO,CAACP,UAAT,EAAqB,OAArB,CAA9B;AACA,UAAMsB,cAAc,GAAGvB,WAAW,CAACQ,OAAO,CAACP,UAAT,EAAqB,WAArB,CAAlC;AACA,UAAMuB,aAAa,GAAGxB,WAAW,CAACQ,OAAO,CAACP,UAAT,EAAqB,QAArB,CAAjC;AACA,UAAMwB,YAAY,GAAGd,mBAAmB,CAACH,OAAO,CAACkB,MAAT,EAAiBJ,UAAU,CAAClB,GAAX,CAAeuB,MAAM,IAAIA,MAAM,CAAC,CAAD,CAA/B,CAAjB,CAAxC;AACA,6BACOnB,OADP;AAEIc,MAAAA,UAFJ;AAGIC,MAAAA,cAHJ;AAIIC,MAAAA,aAJJ;AAKIC,MAAAA;AALJ;AAOH,GAZM,CAAP;AAaH,CAjB6C,CAA3C","sourcesContent":["import { createSelector } from 'reselect';\n\nexport const getSelectedExperimentData = (state) => state.selectedExperimentData;\n\nconst groupDataBy = (prediction, option) => prediction.data.map(value => [\n        Math.trunc(value[0]) * 1000,\n        value[datarun.names.indexOf(option)],\n    ]);\n\nconst groupByEventWindows = (data, timestamps) =>\n     data.map(event => [\n        timestamps.indexOf(Math.trunc(event.start_time) * 1000),\n        timestamps.indexOf(Math.trunc(event.stop_time) * 1000),\n        event.score,\n        event.tag,\n    ]);\n\nexport const getProcessedDataRuns = createSelector(\n    [getSelectedExperimentData],\n    (experimentData) => {\n        if (experimentData.isExperimentDataLoading) { return []; }\n        return experimentData.data.dataruns.map(datarun => {\n            const timeSeries = groupDataBy(datarun.prediction, 'y_raw');\n            const timeseriesPred = groupDataBy(datarun.prediction, 'y_raw_hat');\n            const timeseriesErr = groupDataBy(datarun.prediction, 'es_raw');\n            const eventWindows = groupByEventWindows(datarun.events, timeSeries.map(series => series[0]));\n            return {\n                ...datarun,\n                timeSeries,\n                timeseriesPred,\n                timeseriesErr,\n                eventWindows,\n            };\n        });\n    },\n);\n"]},"metadata":{},"sourceType":"module"}