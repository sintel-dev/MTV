{"ast":null,"code":"import { createSelector } from 'reselect';\nexport const getExperimentsData = state => state.experiments;\nexport const getPipelinesData = state => state.pipelines;\nexport const getDatasets = state => state.datasets;\nexport const getSelectedPipeline = state => state.pipelines.pipelineName;\nexport const getSelectedProjectName = state => state.projects.selectedProject;\nexport const getIsExperimentsLoading = state => state.experiments.isExperimentsLoading;\nexport const getIsProjectsLoading = createSelector([getExperimentsData, getPipelinesData, getDatasets], (experimentsData, pipelinesData, datasets) => experimentsData.ieExperimentsLoading || datasets.isDatasetLoading || pipelinesData.isPipelinesLoading);\n\nconst groupExperimentsByProj = experiments => {\n  const projects = [];\n  const grouppedStack = experiments.reduce((result, currentValue) => {\n    (result[currentValue.project] = result[currentValue.project] || []).push(currentValue);\n    return result;\n  }, []);\n  Object.keys(grouppedStack).forEach(projectName => {\n    projects.push({\n      experimentNum: grouppedStack[projectName].length,\n      experiments: grouppedStack[projectName],\n      name: projectName,\n      // uniquePipelineNum: countPipelines(projectName),\n      signalNum: function () {\n        switch (projectName) {\n          case 'SMAP':\n            return 55;\n\n          case 'MSL':\n            return 27;\n\n          default:\n            // For SES\n            return 71;\n        }\n      }()\n    });\n  });\n  return projects;\n};\n\nexport const getProjectsList = createSelector([getExperimentsData], experimentsData => groupExperimentsByProj(experimentsData.experimentsList));\nexport const getFilteredExperiments = createSelector([getSelectedProjectName, getExperimentsData, getSelectedPipeline], (selectedProjectName, experimentsData, selectedPipeline) => experimentsData.experimentsList.filter(experiment => {\n  const isFromCurrentProject = experiment.project === selectedProjectName;\n  const isPipelineMatch = !selectedPipeline || experiment.pipeline === selectedPipeline;\n  return isFromCurrentProject && isPipelineMatch;\n}));","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/model/selectors/projects.js"],"names":["createSelector","getExperimentsData","state","experiments","getPipelinesData","pipelines","getDatasets","datasets","getSelectedPipeline","pipelineName","getSelectedProjectName","projects","selectedProject","getIsExperimentsLoading","isExperimentsLoading","getIsProjectsLoading","experimentsData","pipelinesData","ieExperimentsLoading","isDatasetLoading","isPipelinesLoading","groupExperimentsByProj","grouppedStack","reduce","result","currentValue","project","push","Object","keys","forEach","projectName","experimentNum","length","name","signalNum","getProjectsList","experimentsList","getFilteredExperiments","selectedProjectName","selectedPipeline","filter","experiment","isFromCurrentProject","isPipelineMatch","pipeline"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AAEA,OAAO,MAAMC,kBAAkB,GAAIC,KAAD,IAAWA,KAAK,CAACC,WAA5C;AACP,OAAO,MAAMC,gBAAgB,GAAIF,KAAD,IAAWA,KAAK,CAACG,SAA1C;AACP,OAAO,MAAMC,WAAW,GAAIJ,KAAD,IAAWA,KAAK,CAACK,QAArC;AACP,OAAO,MAAMC,mBAAmB,GAAIN,KAAD,IAAWA,KAAK,CAACG,SAAN,CAAgBI,YAAvD;AACP,OAAO,MAAMC,sBAAsB,GAAIR,KAAD,IAAWA,KAAK,CAACS,QAAN,CAAeC,eAAzD;AACP,OAAO,MAAMC,uBAAuB,GAAGX,KAAK,IAAIA,KAAK,CAACC,WAAN,CAAkBW,oBAA3D;AAEP,OAAO,MAAMC,oBAAoB,GAAGf,cAAc,CAC9C,CAACC,kBAAD,EAAqBG,gBAArB,EAAuCE,WAAvC,CAD8C,EAE9C,CAACU,eAAD,EAAkBC,aAAlB,EAAiCV,QAAjC,KACIS,eAAe,CAACE,oBAAhB,IAAwCX,QAAQ,CAACY,gBAAjD,IAAqEF,aAAa,CAACG,kBAHzC,CAA3C;;AAKP,MAAMC,sBAAsB,GAAIlB,WAAD,IAAiB;AAC5C,QAAMQ,QAAQ,GAAG,EAAjB;AACA,QAAMW,aAAa,GAAGnB,WAAW,CAACoB,MAAZ,CAAmB,CAACC,MAAD,EAASC,YAAT,KAA0B;AAC/D,KAACD,MAAM,CAACC,YAAY,CAACC,OAAd,CAAN,GAA+BF,MAAM,CAACC,YAAY,CAACC,OAAd,CAAN,IAAgC,EAAhE,EAAoEC,IAApE,CAAyEF,YAAzE;AACA,WAAOD,MAAP;AACH,GAHqB,EAGnB,EAHmB,CAAtB;AAKAI,EAAAA,MAAM,CAACC,IAAP,CAAYP,aAAZ,EAA2BQ,OAA3B,CAAmCC,WAAW,IAAI;AAC9CpB,IAAAA,QAAQ,CAACgB,IAAT,CAAc;AACVK,MAAAA,aAAa,EAAEV,aAAa,CAACS,WAAD,CAAb,CAA2BE,MADhC;AAEV9B,MAAAA,WAAW,EAAEmB,aAAa,CAACS,WAAD,CAFhB;AAGVG,MAAAA,IAAI,EAAEH,WAHI;AAIV;AACAI,MAAAA,SAAS,EAAG,YAAW;AACnB,gBAAQJ,WAAR;AACI,eAAK,MAAL;AAAa,mBAAO,EAAP;;AACb,eAAK,KAAL;AAAY,mBAAO,EAAP;;AACZ;AAAS;AACL,mBAAO,EAAP;AAJR;AAMH,OAPW;AALF,KAAd;AAcH,GAfD;AAiBA,SAAOpB,QAAP;AACH,CAzBD;;AA4BA,OAAO,MAAMyB,eAAe,GAAGpC,cAAc,CACzC,CAACC,kBAAD,CADyC,EAClBe,eAAD,IAAqBK,sBAAsB,CAACL,eAAe,CAACqB,eAAjB,CADxB,CAAtC;AAIP,OAAO,MAAMC,sBAAsB,GAAGtC,cAAc,CAChD,CAACU,sBAAD,EAAyBT,kBAAzB,EAA6CO,mBAA7C,CADgD,EAEhD,CAAC+B,mBAAD,EAAsBvB,eAAtB,EAAuCwB,gBAAvC,KAA4DxB,eAAe,CAACqB,eAAhB,CAAgCI,MAAhC,CAAuCC,UAAU,IAAI;AAC7G,QAAMC,oBAAoB,GAAGD,UAAU,CAAChB,OAAX,KAAuBa,mBAApD;AACA,QAAMK,eAAe,GAAI,CAACJ,gBAAD,IAAqBE,UAAU,CAACG,QAAX,KAAwBL,gBAAtE;AACA,SAAOG,oBAAoB,IAAIC,eAA/B;AACH,CAJ2D,CAFZ,CAA7C","sourcesContent":["import { createSelector } from 'reselect';\n\nexport const getExperimentsData = (state) => state.experiments;\nexport const getPipelinesData = (state) => state.pipelines;\nexport const getDatasets = (state) => state.datasets;\nexport const getSelectedPipeline = (state) => state.pipelines.pipelineName;\nexport const getSelectedProjectName = (state) => state.projects.selectedProject;\nexport const getIsExperimentsLoading = state => state.experiments.isExperimentsLoading;\n\nexport const getIsProjectsLoading = createSelector(\n    [getExperimentsData, getPipelinesData, getDatasets],\n    (experimentsData, pipelinesData, datasets) =>\n        experimentsData.ieExperimentsLoading || datasets.isDatasetLoading || pipelinesData.isPipelinesLoading);\n\nconst groupExperimentsByProj = (experiments) => {\n    const projects = [];\n    const grouppedStack = experiments.reduce((result, currentValue) => {\n        (result[currentValue.project] = result[currentValue.project] || []).push(currentValue);\n        return result;\n    }, []);\n\n    Object.keys(grouppedStack).forEach(projectName => {\n        projects.push({\n            experimentNum: grouppedStack[projectName].length,\n            experiments: grouppedStack[projectName],\n            name: projectName,\n            // uniquePipelineNum: countPipelines(projectName),\n            signalNum: (function() {\n                switch (projectName) {\n                    case 'SMAP': return 55;\n                    case 'MSL': return 27;\n                    default: // For SES\n                        return 71;\n                }\n            }()),\n        });\n    });\n\n    return projects;\n};\n\n\nexport const getProjectsList = createSelector(\n    [getExperimentsData], (experimentsData) => groupExperimentsByProj(experimentsData.experimentsList),\n);\n\nexport const getFilteredExperiments = createSelector(\n    [getSelectedProjectName, getExperimentsData, getSelectedPipeline],\n    (selectedProjectName, experimentsData, selectedPipeline) => experimentsData.experimentsList.filter(experiment => {\n        const isFromCurrentProject = experiment.project === selectedProjectName;\n        const isPipelineMatch = (!selectedPipeline || experiment.pipeline === selectedPipeline);\n        return isFromCurrentProject && isPipelineMatch;\n    }),\n);\n"]},"metadata":{},"sourceType":"module"}