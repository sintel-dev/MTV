{"ast":null,"code":"var _jsxFileName = \"/home/sergiu/Projects/mtv-react/src/components/Landing/Projects.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Loader from '../Common/Loader';\nimport { getProjectsList, getIsProjectsLoading, getSelectedProjectName } from '../../model/selectors/projects';\nimport { selectProject } from '../../model/actions/landing';\n\nconst renderProject = (project, index, onSelectProject, selectedProjectName) => {\n  const activeClass = project.name === selectedProjectName ? 'active' : '';\n  return React.createElement(\"div\", {\n    className: \"cell \".concat(activeClass),\n    key: index,\n    onClick: () => onSelectProject(project.name),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, project.name), React.createElement(\"div\", {\n    className: \"item-data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, project.signalNum, \" Signals\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, project.uniquePipelineNum, \" unique pipelines\")), React.createElement(\"ul\", {\n    className: \"last\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, project.experimentNum, \" experiments\"))));\n};\n\nconst Projects = ({\n  projects,\n  isProjectsLoading,\n  onSelectProject,\n  selectedProjectName\n}) => React.createElement(\"div\", {\n  className: \"item-row scroll-style\",\n  id: \"projects\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31\n  },\n  __self: this\n}, React.createElement(\"h2\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32\n  },\n  __self: this\n}, \"Datasets\"), React.createElement(\"div\", {\n  className: \"item-wrapper\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33\n  },\n  __self: this\n}, React.createElement(Loader, {\n  isLoading: isProjectsLoading,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34\n  },\n  __self: this\n}, projects && projects.length ? projects.map((project, index) => renderProject(project, index, onSelectProject, selectedProjectName)) : React.createElement(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38\n  },\n  __self: this\n}, \"No datasets have been found\"))));\n\nProjects.propTypes = {\n  projects: PropTypes.array,\n  isProjectsLoading: PropTypes.bool,\n  onSelectProject: PropTypes.func,\n  selectedProjectName: PropTypes.string\n};\nexport default connect(state => ({\n  projects: getProjectsList(state),\n  isProjectsLoading: getIsProjectsLoading(state),\n  selectedProjectName: getSelectedProjectName(state)\n}), dispatch => ({\n  onSelectProject: projectName => dispatch(selectProject(projectName))\n}))(Projects);","map":{"version":3,"sources":["/home/sergiu/Projects/mtv-react/src/components/Landing/Projects.jsx"],"names":["React","PropTypes","connect","Loader","getProjectsList","getIsProjectsLoading","getSelectedProjectName","selectProject","renderProject","project","index","onSelectProject","selectedProjectName","activeClass","name","signalNum","uniquePipelineNum","experimentNum","Projects","projects","isProjectsLoading","length","map","propTypes","array","bool","func","string","state","dispatch","projectName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Loader from '../Common/Loader';\nimport {\n  getProjectsList,\n  getIsProjectsLoading,\n  getSelectedProjectName,\n} from '../../model/selectors/projects';\nimport { selectProject } from '../../model/actions/landing';\n\nconst renderProject = (project, index, onSelectProject, selectedProjectName) => {\n  const activeClass = project.name === selectedProjectName ? 'active' : '';\n  return (\n    <div className={`cell ${activeClass}`} key={index} onClick={() => onSelectProject(project.name)}>\n      <h3>{project.name}</h3>\n      <div className=\"item-data\">\n        <ul>\n          <li>{project.signalNum} Signals</li>\n          <li>{project.uniquePipelineNum} unique pipelines</li>\n        </ul>\n        <ul className=\"last\">\n          <li>{project.experimentNum} experiments</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nconst Projects = ({ projects, isProjectsLoading, onSelectProject, selectedProjectName }) => (\n  <div className=\"item-row scroll-style\" id=\"projects\">\n    <h2>Datasets</h2>\n    <div className=\"item-wrapper\">\n      <Loader isLoading={isProjectsLoading}>\n        {\n              projects && projects.length ?\n                projects.map((project, index) => renderProject(project, index, onSelectProject, selectedProjectName)) :\n                <p>No datasets have been found</p>\n            }\n      </Loader>\n    </div>\n  </div>);\n\nProjects.propTypes = {\n  projects: PropTypes.array,\n  isProjectsLoading: PropTypes.bool,\n  onSelectProject: PropTypes.func,\n  selectedProjectName: PropTypes.string,\n};\n\nexport default connect(state => ({\n  projects: getProjectsList(state),\n  isProjectsLoading: getIsProjectsLoading(state),\n  selectedProjectName: getSelectedProjectName(state),\n}), dispatch => ({\n  onSelectProject: (projectName) => dispatch(selectProject(projectName)),\n}))(Projects);\n"]},"metadata":{},"sourceType":"module"}